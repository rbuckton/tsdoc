// This file was autogenerated by ~/scripts/generateTests.js and should not be modified.

import { BlockParser } from "../BlockParser";
import { Document } from "../../nodes/Document";
import { SnapshotSerializer } from "./serializers";
import { HtmlEmitter } from "../../emitters/HtmlEmitter";
import { TSDocConfiguration } from "../../../configuration/TSDocConfiguration";

expect.addSnapshotSerializer(SnapshotSerializer.serializer);

function parse(text: string): Document {
    const parser: BlockParser = new BlockParser(new TSDocConfiguration(), text, undefined, false);
    return parser.parse();
}

function emit(document: Document): string {
    const emitter: HtmlEmitter = new HtmlEmitter(new TSDocConfiguration());
    emitter.emit(document);
    return emitter.toString();
}

describe("Tabs", () => {
    it("<https://spec.commonmark.org/0.29/#example-1>", () => {
        const markdown: string = "\tfoo\tbaz\t\tbim\n";
        const expected: string = "<pre><code>foo\tbaz\t\tbim\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-2>", () => {
        const markdown: string = "  \tfoo\tbaz\t\tbim\n";
        const expected: string = "<pre><code>foo\tbaz\t\tbim\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-3>", () => {
        const markdown: string = "    a\ta\n    ὐ\ta\n";
        const expected: string = "<pre><code>a\ta\nὐ\ta\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-4>", () => {
        const markdown: string = "  - foo\n\n\tbar\n";
        const expected: string = "<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-5>", () => {
        const markdown: string = "- foo\n\n\t\tbar\n";
        const expected: string = "<ul>\n<li>\n<p>foo</p>\n<pre><code>  bar\n</code></pre>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-6>", () => {
        const markdown: string = ">\t\tfoo\n";
        const expected: string = "<blockquote>\n<pre><code>  foo\n</code></pre>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-7>", () => {
        const markdown: string = "-\t\tfoo\n";
        const expected: string = "<ul>\n<li>\n<pre><code>  foo\n</code></pre>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-8>", () => {
        const markdown: string = "    foo\n\tbar\n";
        const expected: string = "<pre><code>foo\nbar\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-9>", () => {
        const markdown: string = " - foo\n   - bar\n\t - baz\n";
        const expected: string = "<ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>baz</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-10>", () => {
        const markdown: string = "#\tFoo\n";
        const expected: string = "<h1>Foo</h1>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-11>", () => {
        const markdown: string = "*\t*\t*\t\n";
        const expected: string = "<hr />\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Precedence", () => {
    it("<https://spec.commonmark.org/0.29/#example-12>", () => {
        const markdown: string = "- `one\n- two`\n";
        const expected: string = "<ul>\n<li>`one</li>\n<li>two`</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Thematic breaks", () => {
    it("<https://spec.commonmark.org/0.29/#example-13>", () => {
        const markdown: string = "***\n---\n___\n";
        const expected: string = "<hr />\n<hr />\n<hr />\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-14>", () => {
        const markdown: string = "+++\n";
        const expected: string = "<p>+++</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-15>", () => {
        const markdown: string = "===\n";
        const expected: string = "<p>===</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-16>", () => {
        const markdown: string = "--\n**\n__\n";
        const expected: string = "<p>--\n**\n__</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-17>", () => {
        const markdown: string = " ***\n  ***\n   ***\n";
        const expected: string = "<hr />\n<hr />\n<hr />\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-18>", () => {
        const markdown: string = "    ***\n";
        const expected: string = "<pre><code>***\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-19>", () => {
        const markdown: string = "Foo\n    ***\n";
        const expected: string = "<p>Foo\n***</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-20>", () => {
        const markdown: string = "_____________________________________\n";
        const expected: string = "<hr />\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-21>", () => {
        const markdown: string = " - - -\n";
        const expected: string = "<hr />\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-22>", () => {
        const markdown: string = " **  * ** * ** * **\n";
        const expected: string = "<hr />\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-23>", () => {
        const markdown: string = "-     -      -      -\n";
        const expected: string = "<hr />\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-24>", () => {
        const markdown: string = "- - - -    \n";
        const expected: string = "<hr />\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-25>", () => {
        const markdown: string = "_ _ _ _ a\n\na------\n\n---a---\n";
        const expected: string = "<p>_ _ _ _ a</p>\n<p>a------</p>\n<p>---a---</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-26>", () => {
        const markdown: string = " *-*\n";
        const expected: string = "<p><em>-</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-27>", () => {
        const markdown: string = "- foo\n***\n- bar\n";
        const expected: string = "<ul>\n<li>foo</li>\n</ul>\n<hr />\n<ul>\n<li>bar</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-28>", () => {
        const markdown: string = "Foo\n***\nbar\n";
        const expected: string = "<p>Foo</p>\n<hr />\n<p>bar</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-29>", () => {
        const markdown: string = "Foo\n---\nbar\n";
        const expected: string = "<h2>Foo</h2>\n<p>bar</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-30>", () => {
        const markdown: string = "* Foo\n* * *\n* Bar\n";
        const expected: string = "<ul>\n<li>Foo</li>\n</ul>\n<hr />\n<ul>\n<li>Bar</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-31>", () => {
        const markdown: string = "- Foo\n- * * *\n";
        const expected: string = "<ul>\n<li>Foo</li>\n<li>\n<hr />\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("ATX headings", () => {
    it("<https://spec.commonmark.org/0.29/#example-32>", () => {
        const markdown: string = "# foo\n## foo\n### foo\n#### foo\n##### foo\n###### foo\n";
        const expected: string = "<h1>foo</h1>\n<h2>foo</h2>\n<h3>foo</h3>\n<h4>foo</h4>\n<h5>foo</h5>\n<h6>foo</h6>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-33>", () => {
        const markdown: string = "####### foo\n";
        const expected: string = "<p>####### foo</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-34>", () => {
        const markdown: string = "#5 bolt\n\n#hashtag\n";
        const expected: string = "<p>#5 bolt</p>\n<p>#hashtag</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-35>", () => {
        const markdown: string = "\\## foo\n";
        const expected: string = "<p>## foo</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-36>", () => {
        const markdown: string = "# foo *bar* \\*baz\\*\n";
        const expected: string = "<h1>foo <em>bar</em> *baz*</h1>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-37>", () => {
        const markdown: string = "#                  foo                     \n";
        const expected: string = "<h1>foo</h1>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-38>", () => {
        const markdown: string = " ### foo\n  ## foo\n   # foo\n";
        const expected: string = "<h3>foo</h3>\n<h2>foo</h2>\n<h1>foo</h1>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-39>", () => {
        const markdown: string = "    # foo\n";
        const expected: string = "<pre><code># foo\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-40>", () => {
        const markdown: string = "foo\n    # bar\n";
        const expected: string = "<p>foo\n# bar</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-41>", () => {
        const markdown: string = "## foo ##\n  ###   bar    ###\n";
        const expected: string = "<h2>foo</h2>\n<h3>bar</h3>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-42>", () => {
        const markdown: string = "# foo ##################################\n##### foo ##\n";
        const expected: string = "<h1>foo</h1>\n<h5>foo</h5>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-43>", () => {
        const markdown: string = "### foo ###     \n";
        const expected: string = "<h3>foo</h3>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-44>", () => {
        const markdown: string = "### foo ### b\n";
        const expected: string = "<h3>foo ### b</h3>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-45>", () => {
        const markdown: string = "# foo#\n";
        const expected: string = "<h1>foo#</h1>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-46>", () => {
        const markdown: string = "### foo \\###\n## foo #\\##\n# foo \\#\n";
        const expected: string = "<h3>foo ###</h3>\n<h2>foo ###</h2>\n<h1>foo #</h1>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-47>", () => {
        const markdown: string = "****\n## foo\n****\n";
        const expected: string = "<hr />\n<h2>foo</h2>\n<hr />\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-48>", () => {
        const markdown: string = "Foo bar\n# baz\nBar foo\n";
        const expected: string = "<p>Foo bar</p>\n<h1>baz</h1>\n<p>Bar foo</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-49>", () => {
        const markdown: string = "## \n#\n### ###\n";
        const expected: string = "<h2></h2>\n<h1></h1>\n<h3></h3>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Setext headings", () => {
    it("<https://spec.commonmark.org/0.29/#example-50>", () => {
        const markdown: string = "Foo *bar*\n=========\n\nFoo *bar*\n---------\n";
        const expected: string = "<h1>Foo <em>bar</em></h1>\n<h2>Foo <em>bar</em></h2>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-51>", () => {
        const markdown: string = "Foo *bar\nbaz*\n====\n";
        const expected: string = "<h1>Foo <em>bar\nbaz</em></h1>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-52>", () => {
        const markdown: string = "  Foo *bar\nbaz*\t\n====\n";
        const expected: string = "<h1>Foo <em>bar\nbaz</em></h1>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-53>", () => {
        const markdown: string = "Foo\n-------------------------\n\nFoo\n=\n";
        const expected: string = "<h2>Foo</h2>\n<h1>Foo</h1>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-54>", () => {
        const markdown: string = "   Foo\n---\n\n  Foo\n-----\n\n  Foo\n  ===\n";
        const expected: string = "<h2>Foo</h2>\n<h2>Foo</h2>\n<h1>Foo</h1>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-55>", () => {
        const markdown: string = "    Foo\n    ---\n\n    Foo\n---\n";
        const expected: string = "<pre><code>Foo\n---\n\nFoo\n</code></pre>\n<hr />\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-56>", () => {
        const markdown: string = "Foo\n   ----      \n";
        const expected: string = "<h2>Foo</h2>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-57>", () => {
        const markdown: string = "Foo\n    ---\n";
        const expected: string = "<p>Foo\n---</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-58>", () => {
        const markdown: string = "Foo\n= =\n\nFoo\n--- -\n";
        const expected: string = "<p>Foo\n= =</p>\n<p>Foo</p>\n<hr />\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-59>", () => {
        const markdown: string = "Foo  \n-----\n";
        const expected: string = "<h2>Foo</h2>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-60>", () => {
        const markdown: string = "Foo\\\n----\n";
        const expected: string = "<h2>Foo\\</h2>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-61>", () => {
        const markdown: string = "`Foo\n----\n`\n\n<a title=\"a lot\n---\nof dashes\"/>\n";
        const expected: string = "<h2>`Foo</h2>\n<p>`</p>\n<h2>&lt;a title=&quot;a lot</h2>\n<p>of dashes&quot;/&gt;</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-62>", () => {
        const markdown: string = "> Foo\n---\n";
        const expected: string = "<blockquote>\n<p>Foo</p>\n</blockquote>\n<hr />\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-63>", () => {
        const markdown: string = "> foo\nbar\n===\n";
        const expected: string = "<blockquote>\n<p>foo\nbar\n===</p>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-64>", () => {
        const markdown: string = "- Foo\n---\n";
        const expected: string = "<ul>\n<li>Foo</li>\n</ul>\n<hr />\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-65>", () => {
        const markdown: string = "Foo\nBar\n---\n";
        const expected: string = "<h2>Foo\nBar</h2>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-66>", () => {
        const markdown: string = "---\nFoo\n---\nBar\n---\nBaz\n";
        const expected: string = "<hr />\n<h2>Foo</h2>\n<h2>Bar</h2>\n<p>Baz</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-67>", () => {
        const markdown: string = "\n====\n";
        const expected: string = "<p>====</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-68>", () => {
        const markdown: string = "---\n---\n";
        const expected: string = "<hr />\n<hr />\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-69>", () => {
        const markdown: string = "- foo\n-----\n";
        const expected: string = "<ul>\n<li>foo</li>\n</ul>\n<hr />\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-70>", () => {
        const markdown: string = "    foo\n---\n";
        const expected: string = "<pre><code>foo\n</code></pre>\n<hr />\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-71>", () => {
        const markdown: string = "> foo\n-----\n";
        const expected: string = "<blockquote>\n<p>foo</p>\n</blockquote>\n<hr />\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-72>", () => {
        const markdown: string = "\\> foo\n------\n";
        const expected: string = "<h2>&gt; foo</h2>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-73>", () => {
        const markdown: string = "Foo\n\nbar\n---\nbaz\n";
        const expected: string = "<p>Foo</p>\n<h2>bar</h2>\n<p>baz</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-74>", () => {
        const markdown: string = "Foo\nbar\n\n---\n\nbaz\n";
        const expected: string = "<p>Foo\nbar</p>\n<hr />\n<p>baz</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-75>", () => {
        const markdown: string = "Foo\nbar\n* * *\nbaz\n";
        const expected: string = "<p>Foo\nbar</p>\n<hr />\n<p>baz</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-76>", () => {
        const markdown: string = "Foo\nbar\n\\---\nbaz\n";
        const expected: string = "<p>Foo\nbar\n---\nbaz</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Indented code blocks", () => {
    it("<https://spec.commonmark.org/0.29/#example-77>", () => {
        const markdown: string = "    a simple\n      indented code block\n";
        const expected: string = "<pre><code>a simple\n  indented code block\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-78>", () => {
        const markdown: string = "  - foo\n\n    bar\n";
        const expected: string = "<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-79>", () => {
        const markdown: string = "1.  foo\n\n    - bar\n";
        const expected: string = "<ol>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-80>", () => {
        const markdown: string = "    <a/>\n    *hi*\n\n    - one\n";
        const expected: string = "<pre><code>&lt;a/&gt;\n*hi*\n\n- one\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-81>", () => {
        const markdown: string = "    chunk1\n\n    chunk2\n  \n \n \n    chunk3\n";
        const expected: string = "<pre><code>chunk1\n\nchunk2\n\n\n\nchunk3\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-82>", () => {
        const markdown: string = "    chunk1\n      \n      chunk2\n";
        const expected: string = "<pre><code>chunk1\n  \n  chunk2\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-83>", () => {
        const markdown: string = "Foo\n    bar\n\n";
        const expected: string = "<p>Foo\nbar</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-84>", () => {
        const markdown: string = "    foo\nbar\n";
        const expected: string = "<pre><code>foo\n</code></pre>\n<p>bar</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-85>", () => {
        const markdown: string = "# Heading\n    foo\nHeading\n------\n    foo\n----\n";
        const expected: string = "<h1>Heading</h1>\n<pre><code>foo\n</code></pre>\n<h2>Heading</h2>\n<pre><code>foo\n</code></pre>\n<hr />\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-86>", () => {
        const markdown: string = "        foo\n    bar\n";
        const expected: string = "<pre><code>    foo\nbar\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-87>", () => {
        const markdown: string = "\n    \n    foo\n    \n\n";
        const expected: string = "<pre><code>foo\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-88>", () => {
        const markdown: string = "    foo  \n";
        const expected: string = "<pre><code>foo  \n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Fenced code blocks", () => {
    it("<https://spec.commonmark.org/0.29/#example-89>", () => {
        const markdown: string = "```\n<\n >\n```\n";
        const expected: string = "<pre><code>&lt;\n &gt;\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-90>", () => {
        const markdown: string = "~~~\n<\n >\n~~~\n";
        const expected: string = "<pre><code>&lt;\n &gt;\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-91>", () => {
        const markdown: string = "``\nfoo\n``\n";
        const expected: string = "<p><code>foo</code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-92>", () => {
        const markdown: string = "```\naaa\n~~~\n```\n";
        const expected: string = "<pre><code>aaa\n~~~\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-93>", () => {
        const markdown: string = "~~~\naaa\n```\n~~~\n";
        const expected: string = "<pre><code>aaa\n```\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-94>", () => {
        const markdown: string = "````\naaa\n```\n``````\n";
        const expected: string = "<pre><code>aaa\n```\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-95>", () => {
        const markdown: string = "~~~~\naaa\n~~~\n~~~~\n";
        const expected: string = "<pre><code>aaa\n~~~\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-96>", () => {
        const markdown: string = "```\n";
        const expected: string = "<pre><code></code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-97>", () => {
        const markdown: string = "`````\n\n```\naaa\n";
        const expected: string = "<pre><code>\n```\naaa\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-98>", () => {
        const markdown: string = "> ```\n> aaa\n\nbbb\n";
        const expected: string = "<blockquote>\n<pre><code>aaa\n</code></pre>\n</blockquote>\n<p>bbb</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-99>", () => {
        const markdown: string = "```\n\n  \n```\n";
        const expected: string = "<pre><code>\n  \n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-100>", () => {
        const markdown: string = "```\n```\n";
        const expected: string = "<pre><code></code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-101>", () => {
        const markdown: string = " ```\n aaa\naaa\n```\n";
        const expected: string = "<pre><code>aaa\naaa\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-102>", () => {
        const markdown: string = "  ```\naaa\n  aaa\naaa\n  ```\n";
        const expected: string = "<pre><code>aaa\naaa\naaa\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-103>", () => {
        const markdown: string = "   ```\n   aaa\n    aaa\n  aaa\n   ```\n";
        const expected: string = "<pre><code>aaa\n aaa\naaa\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-104>", () => {
        const markdown: string = "    ```\n    aaa\n    ```\n";
        const expected: string = "<pre><code>```\naaa\n```\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-105>", () => {
        const markdown: string = "```\naaa\n  ```\n";
        const expected: string = "<pre><code>aaa\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-106>", () => {
        const markdown: string = "   ```\naaa\n  ```\n";
        const expected: string = "<pre><code>aaa\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-107>", () => {
        const markdown: string = "```\naaa\n    ```\n";
        const expected: string = "<pre><code>aaa\n    ```\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-108>", () => {
        const markdown: string = "``` ```\naaa\n";
        const expected: string = "<p><code> </code>\naaa</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-109>", () => {
        const markdown: string = "~~~~~~\naaa\n~~~ ~~\n";
        const expected: string = "<pre><code>aaa\n~~~ ~~\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-110>", () => {
        const markdown: string = "foo\n```\nbar\n```\nbaz\n";
        const expected: string = "<p>foo</p>\n<pre><code>bar\n</code></pre>\n<p>baz</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-111>", () => {
        const markdown: string = "foo\n---\n~~~\nbar\n~~~\n# baz\n";
        const expected: string = "<h2>foo</h2>\n<pre><code>bar\n</code></pre>\n<h1>baz</h1>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-112>", () => {
        const markdown: string = "```ruby\ndef foo(x)\n  return 3\nend\n```\n";
        const expected: string = "<pre><code class=\"language-ruby\">def foo(x)\n  return 3\nend\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-113>", () => {
        const markdown: string = "~~~~    ruby startline=3 $%@#$\ndef foo(x)\n  return 3\nend\n~~~~~~~\n";
        const expected: string = "<pre><code class=\"language-ruby\">def foo(x)\n  return 3\nend\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-114>", () => {
        const markdown: string = "````;\n````\n";
        const expected: string = "<pre><code class=\"language-;\"></code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-115>", () => {
        const markdown: string = "``` aa ```\nfoo\n";
        const expected: string = "<p><code>aa</code>\nfoo</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-116>", () => {
        const markdown: string = "~~~ aa ``` ~~~\nfoo\n~~~\n";
        const expected: string = "<pre><code class=\"language-aa\">foo\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-117>", () => {
        const markdown: string = "```\n``` aaa\n```\n";
        const expected: string = "<pre><code>``` aaa\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("HTML blocks", () => {
    it("<https://spec.commonmark.org/0.29/#example-118>", () => {
        const markdown: string = "<table><tr><td>\n<pre>\n**Hello**,\n\n_world_.\n</pre>\n</td></tr></table>\n";
        const expected: string = "<table><tr><td>\n<pre>\n**Hello**,\n<p><em>world</em>.\n</pre></p>\n</td></tr></table>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-119>", () => {
        const markdown: string = "<table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n\nokay.\n";
        const expected: string = "<table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n<p>okay.</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-120>", () => {
        const markdown: string = " <div>\n  *hello*\n         <foo><a>\n";
        const expected: string = " <div>\n  *hello*\n         <foo><a>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-121>", () => {
        const markdown: string = "</div>\n*foo*\n";
        const expected: string = "</div>\n*foo*\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-122>", () => {
        const markdown: string = "<DIV CLASS=\"foo\">\n\n*Markdown*\n\n</DIV>\n";
        const expected: string = "<DIV CLASS=\"foo\">\n<p><em>Markdown</em></p>\n</DIV>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-123>", () => {
        const markdown: string = "<div id=\"foo\"\n  class=\"bar\">\n</div>\n";
        const expected: string = "<div id=\"foo\"\n  class=\"bar\">\n</div>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-124>", () => {
        const markdown: string = "<div id=\"foo\" class=\"bar\n  baz\">\n</div>\n";
        const expected: string = "<div id=\"foo\" class=\"bar\n  baz\">\n</div>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-125>", () => {
        const markdown: string = "<div>\n*foo*\n\n*bar*\n";
        const expected: string = "<div>\n*foo*\n<p><em>bar</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-126>", () => {
        const markdown: string = "<div id=\"foo\"\n*hi*\n";
        const expected: string = "<div id=\"foo\"\n*hi*\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-127>", () => {
        const markdown: string = "<div class\nfoo\n";
        const expected: string = "<div class\nfoo\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-128>", () => {
        const markdown: string = "<div *???-&&&-<---\n*foo*\n";
        const expected: string = "<div *???-&&&-<---\n*foo*\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-129>", () => {
        const markdown: string = "<div><a href=\"bar\">*foo*</a></div>\n";
        const expected: string = "<div><a href=\"bar\">*foo*</a></div>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-130>", () => {
        const markdown: string = "<table><tr><td>\nfoo\n</td></tr></table>\n";
        const expected: string = "<table><tr><td>\nfoo\n</td></tr></table>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-131>", () => {
        const markdown: string = "<div></div>\n``` c\nint x = 33;\n```\n";
        const expected: string = "<div></div>\n``` c\nint x = 33;\n```\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-132>", () => {
        const markdown: string = "<a href=\"foo\">\n*bar*\n</a>\n";
        const expected: string = "<a href=\"foo\">\n*bar*\n</a>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-133>", () => {
        const markdown: string = "<Warning>\n*bar*\n</Warning>\n";
        const expected: string = "<Warning>\n*bar*\n</Warning>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-134>", () => {
        const markdown: string = "<i class=\"foo\">\n*bar*\n</i>\n";
        const expected: string = "<i class=\"foo\">\n*bar*\n</i>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-135>", () => {
        const markdown: string = "</ins>\n*bar*\n";
        const expected: string = "</ins>\n*bar*\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-136>", () => {
        const markdown: string = "<del>\n*foo*\n</del>\n";
        const expected: string = "<del>\n*foo*\n</del>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-137>", () => {
        const markdown: string = "<del>\n\n*foo*\n\n</del>\n";
        const expected: string = "<del>\n<p><em>foo</em></p>\n</del>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-138>", () => {
        const markdown: string = "<del>*foo*</del>\n";
        const expected: string = "<p><del><em>foo</em></del></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-139>", () => {
        const markdown: string = "<pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\nokay\n";
        const expected: string = "<pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\n<p>okay</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-140>", () => {
        const markdown: string = "<script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\nokay\n";
        const expected: string = "<script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\n<p>okay</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-141>", () => {
        const markdown: string = "<style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\nokay\n";
        const expected: string = "<style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\n<p>okay</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-142>", () => {
        const markdown: string = "<style\n  type=\"text/css\">\n\nfoo\n";
        const expected: string = "<style\n  type=\"text/css\">\n\nfoo\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-143>", () => {
        const markdown: string = "> <div>\n> foo\n\nbar\n";
        const expected: string = "<blockquote>\n<div>\nfoo\n</blockquote>\n<p>bar</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-144>", () => {
        const markdown: string = "- <div>\n- foo\n";
        const expected: string = "<ul>\n<li>\n<div>\n</li>\n<li>foo</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-145>", () => {
        const markdown: string = "<style>p{color:red;}</style>\n*foo*\n";
        const expected: string = "<style>p{color:red;}</style>\n<p><em>foo</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-146>", () => {
        const markdown: string = "<!-- foo -->*bar*\n*baz*\n";
        const expected: string = "<!-- foo -->*bar*\n<p><em>baz</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-147>", () => {
        const markdown: string = "<script>\nfoo\n</script>1. *bar*\n";
        const expected: string = "<script>\nfoo\n</script>1. *bar*\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-148>", () => {
        const markdown: string = "<!-- Foo\n\nbar\n   baz -->\nokay\n";
        const expected: string = "<!-- Foo\n\nbar\n   baz -->\n<p>okay</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-149>", () => {
        const markdown: string = "<?php\n\n  echo '>';\n\n?>\nokay\n";
        const expected: string = "<?php\n\n  echo '>';\n\n?>\n<p>okay</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-150>", () => {
        const markdown: string = "<!DOCTYPE html>\n";
        const expected: string = "<!DOCTYPE html>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-151>", () => {
        const markdown: string = "<![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\nokay\n";
        const expected: string = "<![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\n<p>okay</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-152>", () => {
        const markdown: string = "  <!-- foo -->\n\n    <!-- foo -->\n";
        const expected: string = "  <!-- foo -->\n<pre><code>&lt;!-- foo --&gt;\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-153>", () => {
        const markdown: string = "  <div>\n\n    <div>\n";
        const expected: string = "  <div>\n<pre><code>&lt;div&gt;\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-154>", () => {
        const markdown: string = "Foo\n<div>\nbar\n</div>\n";
        const expected: string = "<p>Foo</p>\n<div>\nbar\n</div>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-155>", () => {
        const markdown: string = "<div>\nbar\n</div>\n*foo*\n";
        const expected: string = "<div>\nbar\n</div>\n*foo*\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-156>", () => {
        const markdown: string = "Foo\n<a href=\"bar\">\nbaz\n";
        const expected: string = "<p>Foo\n<a href=\"bar\">\nbaz</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-157>", () => {
        const markdown: string = "<div>\n\n*Emphasized* text.\n\n</div>\n";
        const expected: string = "<div>\n<p><em>Emphasized</em> text.</p>\n</div>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-158>", () => {
        const markdown: string = "<div>\n*Emphasized* text.\n</div>\n";
        const expected: string = "<div>\n*Emphasized* text.\n</div>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-159>", () => {
        const markdown: string = "<table>\n\n<tr>\n\n<td>\nHi\n</td>\n\n</tr>\n\n</table>\n";
        const expected: string = "<table>\n<tr>\n<td>\nHi\n</td>\n</tr>\n</table>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-160>", () => {
        const markdown: string = "<table>\n\n  <tr>\n\n    <td>\n      Hi\n    </td>\n\n  </tr>\n\n</table>\n";
        const expected: string = "<table>\n  <tr>\n<pre><code>&lt;td&gt;\n  Hi\n&lt;/td&gt;\n</code></pre>\n  </tr>\n</table>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Link reference definitions", () => {
    it("<https://spec.commonmark.org/0.29/#example-161>", () => {
        const markdown: string = "[foo]: /url \"title\"\n\n[foo]\n";
        const expected: string = "<p><a href=\"/url\" title=\"title\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-162>", () => {
        const markdown: string = "   [foo]: \n      /url  \n           'the title'  \n\n[foo]\n";
        const expected: string = "<p><a href=\"/url\" title=\"the title\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-163>", () => {
        const markdown: string = "[Foo*bar\\]]:my_(url) 'title (with parens)'\n\n[Foo*bar\\]]\n";
        const expected: string = "<p><a href=\"my_(url)\" title=\"title (with parens)\">Foo*bar]</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-164>", () => {
        const markdown: string = "[Foo bar]:\n<my url>\n'title'\n\n[Foo bar]\n";
        const expected: string = "<p><a href=\"my%20url\" title=\"title\">Foo bar</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-165>", () => {
        const markdown: string = "[foo]: /url '\ntitle\nline1\nline2\n'\n\n[foo]\n";
        const expected: string = "<p><a href=\"/url\" title=\"\ntitle\nline1\nline2\n\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-166>", () => {
        const markdown: string = "[foo]: /url 'title\n\nwith blank line'\n\n[foo]\n";
        const expected: string = "<p>[foo]: /url 'title</p>\n<p>with blank line'</p>\n<p>[foo]</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-167>", () => {
        const markdown: string = "[foo]:\n/url\n\n[foo]\n";
        const expected: string = "<p><a href=\"/url\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-168>", () => {
        const markdown: string = "[foo]:\n\n[foo]\n";
        const expected: string = "<p>[foo]:</p>\n<p>[foo]</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-169>", () => {
        const markdown: string = "[foo]: <>\n\n[foo]\n";
        const expected: string = "<p><a href=\"\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-170>", () => {
        const markdown: string = "[foo]: <bar>(baz)\n\n[foo]\n";
        const expected: string = "<p>[foo]: <bar>(baz)</p>\n<p>[foo]</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-171>", () => {
        const markdown: string = "[foo]: /url\\bar\\*baz \"foo\\\"bar\\baz\"\n\n[foo]\n";
        const expected: string = "<p><a href=\"/url%5Cbar*baz\" title=\"foo&quot;bar\\baz\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-172>", () => {
        const markdown: string = "[foo]\n\n[foo]: url\n";
        const expected: string = "<p><a href=\"url\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-173>", () => {
        const markdown: string = "[foo]\n\n[foo]: first\n[foo]: second\n";
        const expected: string = "<p><a href=\"first\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-174>", () => {
        const markdown: string = "[FOO]: /url\n\n[Foo]\n";
        const expected: string = "<p><a href=\"/url\">Foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-175>", () => {
        const markdown: string = "[ΑΓΩ]: /φου\n\n[αγω]\n";
        const expected: string = "<p><a href=\"/%CF%86%CE%BF%CF%85\">αγω</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-176>", () => {
        const markdown: string = "[foo]: /url\n";
        const expected: string = "";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-177>", () => {
        const markdown: string = "[\nfoo\n]: /url\nbar\n";
        const expected: string = "<p>bar</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-178>", () => {
        const markdown: string = "[foo]: /url \"title\" ok\n";
        const expected: string = "<p>[foo]: /url &quot;title&quot; ok</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-179>", () => {
        const markdown: string = "[foo]: /url\n\"title\" ok\n";
        const expected: string = "<p>&quot;title&quot; ok</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-180>", () => {
        const markdown: string = "    [foo]: /url \"title\"\n\n[foo]\n";
        const expected: string = "<pre><code>[foo]: /url &quot;title&quot;\n</code></pre>\n<p>[foo]</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-181>", () => {
        const markdown: string = "```\n[foo]: /url\n```\n\n[foo]\n";
        const expected: string = "<pre><code>[foo]: /url\n</code></pre>\n<p>[foo]</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-182>", () => {
        const markdown: string = "Foo\n[bar]: /baz\n\n[bar]\n";
        const expected: string = "<p>Foo\n[bar]: /baz</p>\n<p>[bar]</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-183>", () => {
        const markdown: string = "# [Foo]\n[foo]: /url\n> bar\n";
        const expected: string = "<h1><a href=\"/url\">Foo</a></h1>\n<blockquote>\n<p>bar</p>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-184>", () => {
        const markdown: string = "[foo]: /url\nbar\n===\n[foo]\n";
        const expected: string = "<h1>bar</h1>\n<p><a href=\"/url\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-185>", () => {
        const markdown: string = "[foo]: /url\n===\n[foo]\n";
        const expected: string = "<p>===\n<a href=\"/url\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-186>", () => {
        const markdown: string = "[foo]: /foo-url \"foo\"\n[bar]: /bar-url\n  \"bar\"\n[baz]: /baz-url\n\n[foo],\n[bar],\n[baz]\n";
        const expected: string = "<p><a href=\"/foo-url\" title=\"foo\">foo</a>,\n<a href=\"/bar-url\" title=\"bar\">bar</a>,\n<a href=\"/baz-url\">baz</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-187>", () => {
        const markdown: string = "[foo]\n\n> [foo]: /url\n";
        const expected: string = "<p><a href=\"/url\">foo</a></p>\n<blockquote>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-188>", () => {
        const markdown: string = "[foo]: /url\n";
        const expected: string = "";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Paragraphs", () => {
    it("<https://spec.commonmark.org/0.29/#example-189>", () => {
        const markdown: string = "aaa\n\nbbb\n";
        const expected: string = "<p>aaa</p>\n<p>bbb</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-190>", () => {
        const markdown: string = "aaa\nbbb\n\nccc\nddd\n";
        const expected: string = "<p>aaa\nbbb</p>\n<p>ccc\nddd</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-191>", () => {
        const markdown: string = "aaa\n\n\nbbb\n";
        const expected: string = "<p>aaa</p>\n<p>bbb</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-192>", () => {
        const markdown: string = "  aaa\n bbb\n";
        const expected: string = "<p>aaa\nbbb</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-193>", () => {
        const markdown: string = "aaa\n             bbb\n                                       ccc\n";
        const expected: string = "<p>aaa\nbbb\nccc</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-194>", () => {
        const markdown: string = "   aaa\nbbb\n";
        const expected: string = "<p>aaa\nbbb</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-195>", () => {
        const markdown: string = "    aaa\nbbb\n";
        const expected: string = "<pre><code>aaa\n</code></pre>\n<p>bbb</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-196>", () => {
        const markdown: string = "aaa     \nbbb     \n";
        const expected: string = "<p>aaa<br />\nbbb</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Blank lines", () => {
    it("<https://spec.commonmark.org/0.29/#example-197>", () => {
        const markdown: string = "  \n\naaa\n  \n\n# aaa\n\n  \n";
        const expected: string = "<p>aaa</p>\n<h1>aaa</h1>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Block quotes", () => {
    it("<https://spec.commonmark.org/0.29/#example-198>", () => {
        const markdown: string = "> # Foo\n> bar\n> baz\n";
        const expected: string = "<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-199>", () => {
        const markdown: string = "># Foo\n>bar\n> baz\n";
        const expected: string = "<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-200>", () => {
        const markdown: string = "   > # Foo\n   > bar\n > baz\n";
        const expected: string = "<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-201>", () => {
        const markdown: string = "    > # Foo\n    > bar\n    > baz\n";
        const expected: string = "<pre><code>&gt; # Foo\n&gt; bar\n&gt; baz\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-202>", () => {
        const markdown: string = "> # Foo\n> bar\nbaz\n";
        const expected: string = "<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-203>", () => {
        const markdown: string = "> bar\nbaz\n> foo\n";
        const expected: string = "<blockquote>\n<p>bar\nbaz\nfoo</p>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-204>", () => {
        const markdown: string = "> foo\n---\n";
        const expected: string = "<blockquote>\n<p>foo</p>\n</blockquote>\n<hr />\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-205>", () => {
        const markdown: string = "> - foo\n- bar\n";
        const expected: string = "<blockquote>\n<ul>\n<li>foo</li>\n</ul>\n</blockquote>\n<ul>\n<li>bar</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-206>", () => {
        const markdown: string = ">     foo\n    bar\n";
        const expected: string = "<blockquote>\n<pre><code>foo\n</code></pre>\n</blockquote>\n<pre><code>bar\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-207>", () => {
        const markdown: string = "> ```\nfoo\n```\n";
        const expected: string = "<blockquote>\n<pre><code></code></pre>\n</blockquote>\n<p>foo</p>\n<pre><code></code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-208>", () => {
        const markdown: string = "> foo\n    - bar\n";
        const expected: string = "<blockquote>\n<p>foo\n- bar</p>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-209>", () => {
        const markdown: string = ">\n";
        const expected: string = "<blockquote>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-210>", () => {
        const markdown: string = ">\n>  \n> \n";
        const expected: string = "<blockquote>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-211>", () => {
        const markdown: string = ">\n> foo\n>  \n";
        const expected: string = "<blockquote>\n<p>foo</p>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-212>", () => {
        const markdown: string = "> foo\n\n> bar\n";
        const expected: string = "<blockquote>\n<p>foo</p>\n</blockquote>\n<blockquote>\n<p>bar</p>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-213>", () => {
        const markdown: string = "> foo\n> bar\n";
        const expected: string = "<blockquote>\n<p>foo\nbar</p>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-214>", () => {
        const markdown: string = "> foo\n>\n> bar\n";
        const expected: string = "<blockquote>\n<p>foo</p>\n<p>bar</p>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-215>", () => {
        const markdown: string = "foo\n> bar\n";
        const expected: string = "<p>foo</p>\n<blockquote>\n<p>bar</p>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-216>", () => {
        const markdown: string = "> aaa\n***\n> bbb\n";
        const expected: string = "<blockquote>\n<p>aaa</p>\n</blockquote>\n<hr />\n<blockquote>\n<p>bbb</p>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-217>", () => {
        const markdown: string = "> bar\nbaz\n";
        const expected: string = "<blockquote>\n<p>bar\nbaz</p>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-218>", () => {
        const markdown: string = "> bar\n\nbaz\n";
        const expected: string = "<blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-219>", () => {
        const markdown: string = "> bar\n>\nbaz\n";
        const expected: string = "<blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-220>", () => {
        const markdown: string = "> > > foo\nbar\n";
        const expected: string = "<blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar</p>\n</blockquote>\n</blockquote>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-221>", () => {
        const markdown: string = ">>> foo\n> bar\n>>baz\n";
        const expected: string = "<blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar\nbaz</p>\n</blockquote>\n</blockquote>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-222>", () => {
        const markdown: string = ">     code\n\n>    not code\n";
        const expected: string = "<blockquote>\n<pre><code>code\n</code></pre>\n</blockquote>\n<blockquote>\n<p>not code</p>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("List items", () => {
    it("<https://spec.commonmark.org/0.29/#example-223>", () => {
        const markdown: string = "A paragraph\nwith two lines.\n\n    indented code\n\n> A block quote.\n";
        const expected: string = "<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-224>", () => {
        const markdown: string = "1.  A paragraph\n    with two lines.\n\n        indented code\n\n    > A block quote.\n";
        const expected: string = "<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-225>", () => {
        const markdown: string = "- one\n\n two\n";
        const expected: string = "<ul>\n<li>one</li>\n</ul>\n<p>two</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-226>", () => {
        const markdown: string = "- one\n\n  two\n";
        const expected: string = "<ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-227>", () => {
        const markdown: string = " -    one\n\n     two\n";
        const expected: string = "<ul>\n<li>one</li>\n</ul>\n<pre><code> two\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-228>", () => {
        const markdown: string = " -    one\n\n      two\n";
        const expected: string = "<ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-229>", () => {
        const markdown: string = "   > > 1.  one\n>>\n>>     two\n";
        const expected: string = "<blockquote>\n<blockquote>\n<ol>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ol>\n</blockquote>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-230>", () => {
        const markdown: string = ">>- one\n>>\n  >  > two\n";
        const expected: string = "<blockquote>\n<blockquote>\n<ul>\n<li>one</li>\n</ul>\n<p>two</p>\n</blockquote>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-231>", () => {
        const markdown: string = "-one\n\n2.two\n";
        const expected: string = "<p>-one</p>\n<p>2.two</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-232>", () => {
        const markdown: string = "- foo\n\n\n  bar\n";
        const expected: string = "<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-233>", () => {
        const markdown: string = "1.  foo\n\n    ```\n    bar\n    ```\n\n    baz\n\n    > bam\n";
        const expected: string = "<ol>\n<li>\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n<p>baz</p>\n<blockquote>\n<p>bam</p>\n</blockquote>\n</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-234>", () => {
        const markdown: string = "- Foo\n\n      bar\n\n\n      baz\n";
        const expected: string = "<ul>\n<li>\n<p>Foo</p>\n<pre><code>bar\n\n\nbaz\n</code></pre>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-235>", () => {
        const markdown: string = "123456789. ok\n";
        const expected: string = "<ol start=\"123456789\">\n<li>ok</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-236>", () => {
        const markdown: string = "1234567890. not ok\n";
        const expected: string = "<p>1234567890. not ok</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-237>", () => {
        const markdown: string = "0. ok\n";
        const expected: string = "<ol start=\"0\">\n<li>ok</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-238>", () => {
        const markdown: string = "003. ok\n";
        const expected: string = "<ol start=\"3\">\n<li>ok</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-239>", () => {
        const markdown: string = "-1. not ok\n";
        const expected: string = "<p>-1. not ok</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-240>", () => {
        const markdown: string = "- foo\n\n      bar\n";
        const expected: string = "<ul>\n<li>\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-241>", () => {
        const markdown: string = "  10.  foo\n\n           bar\n";
        const expected: string = "<ol start=\"10\">\n<li>\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-242>", () => {
        const markdown: string = "    indented code\n\nparagraph\n\n    more code\n";
        const expected: string = "<pre><code>indented code\n</code></pre>\n<p>paragraph</p>\n<pre><code>more code\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-243>", () => {
        const markdown: string = "1.     indented code\n\n   paragraph\n\n       more code\n";
        const expected: string = "<ol>\n<li>\n<pre><code>indented code\n</code></pre>\n<p>paragraph</p>\n<pre><code>more code\n</code></pre>\n</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-244>", () => {
        const markdown: string = "1.      indented code\n\n   paragraph\n\n       more code\n";
        const expected: string = "<ol>\n<li>\n<pre><code> indented code\n</code></pre>\n<p>paragraph</p>\n<pre><code>more code\n</code></pre>\n</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-245>", () => {
        const markdown: string = "   foo\n\nbar\n";
        const expected: string = "<p>foo</p>\n<p>bar</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-246>", () => {
        const markdown: string = "-    foo\n\n  bar\n";
        const expected: string = "<ul>\n<li>foo</li>\n</ul>\n<p>bar</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-247>", () => {
        const markdown: string = "-  foo\n\n   bar\n";
        const expected: string = "<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-248>", () => {
        const markdown: string = "-\n  foo\n-\n  ```\n  bar\n  ```\n-\n      baz\n";
        const expected: string = "<ul>\n<li>foo</li>\n<li>\n<pre><code>bar\n</code></pre>\n</li>\n<li>\n<pre><code>baz\n</code></pre>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-249>", () => {
        const markdown: string = "-   \n  foo\n";
        const expected: string = "<ul>\n<li>foo</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-250>", () => {
        const markdown: string = "-\n\n  foo\n";
        const expected: string = "<ul>\n<li></li>\n</ul>\n<p>foo</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-251>", () => {
        const markdown: string = "- foo\n-\n- bar\n";
        const expected: string = "<ul>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-252>", () => {
        const markdown: string = "- foo\n-   \n- bar\n";
        const expected: string = "<ul>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-253>", () => {
        const markdown: string = "1. foo\n2.\n3. bar\n";
        const expected: string = "<ol>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-254>", () => {
        const markdown: string = "*\n";
        const expected: string = "<ul>\n<li></li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-255>", () => {
        const markdown: string = "foo\n*\n\nfoo\n1.\n";
        const expected: string = "<p>foo\n*</p>\n<p>foo\n1.</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-256>", () => {
        const markdown: string = " 1.  A paragraph\n     with two lines.\n\n         indented code\n\n     > A block quote.\n";
        const expected: string = "<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-257>", () => {
        const markdown: string = "  1.  A paragraph\n      with two lines.\n\n          indented code\n\n      > A block quote.\n";
        const expected: string = "<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-258>", () => {
        const markdown: string = "   1.  A paragraph\n       with two lines.\n\n           indented code\n\n       > A block quote.\n";
        const expected: string = "<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-259>", () => {
        const markdown: string = "    1.  A paragraph\n        with two lines.\n\n            indented code\n\n        > A block quote.\n";
        const expected: string = "<pre><code>1.  A paragraph\n    with two lines.\n\n        indented code\n\n    &gt; A block quote.\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-260>", () => {
        const markdown: string = "  1.  A paragraph\nwith two lines.\n\n          indented code\n\n      > A block quote.\n";
        const expected: string = "<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-261>", () => {
        const markdown: string = "  1.  A paragraph\n    with two lines.\n";
        const expected: string = "<ol>\n<li>A paragraph\nwith two lines.</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-262>", () => {
        const markdown: string = "> 1. > Blockquote\ncontinued here.\n";
        const expected: string = "<blockquote>\n<ol>\n<li>\n<blockquote>\n<p>Blockquote\ncontinued here.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-263>", () => {
        const markdown: string = "> 1. > Blockquote\n> continued here.\n";
        const expected: string = "<blockquote>\n<ol>\n<li>\n<blockquote>\n<p>Blockquote\ncontinued here.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-264>", () => {
        const markdown: string = "- foo\n  - bar\n    - baz\n      - boo\n";
        const expected: string = "<ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>baz\n<ul>\n<li>boo</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-265>", () => {
        const markdown: string = "- foo\n - bar\n  - baz\n   - boo\n";
        const expected: string = "<ul>\n<li>foo</li>\n<li>bar</li>\n<li>baz</li>\n<li>boo</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-266>", () => {
        const markdown: string = "10) foo\n    - bar\n";
        const expected: string = "<ol start=\"10\">\n<li>foo\n<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-267>", () => {
        const markdown: string = "10) foo\n   - bar\n";
        const expected: string = "<ol start=\"10\">\n<li>foo</li>\n</ol>\n<ul>\n<li>bar</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-268>", () => {
        const markdown: string = "- - foo\n";
        const expected: string = "<ul>\n<li>\n<ul>\n<li>foo</li>\n</ul>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-269>", () => {
        const markdown: string = "1. - 2. foo\n";
        const expected: string = "<ol>\n<li>\n<ul>\n<li>\n<ol start=\"2\">\n<li>foo</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-270>", () => {
        const markdown: string = "- # Foo\n- Bar\n  ---\n  baz\n";
        const expected: string = "<ul>\n<li>\n<h1>Foo</h1>\n</li>\n<li>\n<h2>Bar</h2>\nbaz</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Lists", () => {
    it("<https://spec.commonmark.org/0.29/#example-271>", () => {
        const markdown: string = "- foo\n- bar\n+ baz\n";
        const expected: string = "<ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<ul>\n<li>baz</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-272>", () => {
        const markdown: string = "1. foo\n2. bar\n3) baz\n";
        const expected: string = "<ol>\n<li>foo</li>\n<li>bar</li>\n</ol>\n<ol start=\"3\">\n<li>baz</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-273>", () => {
        const markdown: string = "Foo\n- bar\n- baz\n";
        const expected: string = "<p>Foo</p>\n<ul>\n<li>bar</li>\n<li>baz</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-274>", () => {
        const markdown: string = "The number of windows in my house is\n14.  The number of doors is 6.\n";
        const expected: string = "<p>The number of windows in my house is\n14.  The number of doors is 6.</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-275>", () => {
        const markdown: string = "The number of windows in my house is\n1.  The number of doors is 6.\n";
        const expected: string = "<p>The number of windows in my house is</p>\n<ol>\n<li>The number of doors is 6.</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-276>", () => {
        const markdown: string = "- foo\n\n- bar\n\n\n- baz\n";
        const expected: string = "<ul>\n<li>\n<p>foo</p>\n</li>\n<li>\n<p>bar</p>\n</li>\n<li>\n<p>baz</p>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-277>", () => {
        const markdown: string = "- foo\n  - bar\n    - baz\n\n\n      bim\n";
        const expected: string = "<ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>\n<p>baz</p>\n<p>bim</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-278>", () => {
        const markdown: string = "- foo\n- bar\n\n<!-- -->\n\n- baz\n- bim\n";
        const expected: string = "<ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<!-- -->\n<ul>\n<li>baz</li>\n<li>bim</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-279>", () => {
        const markdown: string = "-   foo\n\n    notcode\n\n-   foo\n\n<!-- -->\n\n    code\n";
        const expected: string = "<ul>\n<li>\n<p>foo</p>\n<p>notcode</p>\n</li>\n<li>\n<p>foo</p>\n</li>\n</ul>\n<!-- -->\n<pre><code>code\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-280>", () => {
        const markdown: string = "- a\n - b\n  - c\n   - d\n  - e\n - f\n- g\n";
        const expected: string = "<ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d</li>\n<li>e</li>\n<li>f</li>\n<li>g</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-281>", () => {
        const markdown: string = "1. a\n\n  2. b\n\n   3. c\n";
        const expected: string = "<ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-282>", () => {
        const markdown: string = "- a\n - b\n  - c\n   - d\n    - e\n";
        const expected: string = "<ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d\n- e</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-283>", () => {
        const markdown: string = "1. a\n\n  2. b\n\n    3. c\n";
        const expected: string = "<ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n</ol>\n<pre><code>3. c\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-284>", () => {
        const markdown: string = "- a\n- b\n\n- c\n";
        const expected: string = "<ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-285>", () => {
        const markdown: string = "* a\n*\n\n* c\n";
        const expected: string = "<ul>\n<li>\n<p>a</p>\n</li>\n<li></li>\n<li>\n<p>c</p>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-286>", () => {
        const markdown: string = "- a\n- b\n\n  c\n- d\n";
        const expected: string = "<ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-287>", () => {
        const markdown: string = "- a\n- b\n\n  [ref]: /url\n- d\n";
        const expected: string = "<ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-288>", () => {
        const markdown: string = "- a\n- ```\n  b\n\n\n  ```\n- c\n";
        const expected: string = "<ul>\n<li>a</li>\n<li>\n<pre><code>b\n\n\n</code></pre>\n</li>\n<li>c</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-289>", () => {
        const markdown: string = "- a\n  - b\n\n    c\n- d\n";
        const expected: string = "<ul>\n<li>a\n<ul>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n</ul>\n</li>\n<li>d</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-290>", () => {
        const markdown: string = "* a\n  > b\n  >\n* c\n";
        const expected: string = "<ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n</li>\n<li>c</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-291>", () => {
        const markdown: string = "- a\n  > b\n  ```\n  c\n  ```\n- d\n";
        const expected: string = "<ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n<pre><code>c\n</code></pre>\n</li>\n<li>d</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-292>", () => {
        const markdown: string = "- a\n";
        const expected: string = "<ul>\n<li>a</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-293>", () => {
        const markdown: string = "- a\n  - b\n";
        const expected: string = "<ul>\n<li>a\n<ul>\n<li>b</li>\n</ul>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-294>", () => {
        const markdown: string = "1. ```\n   foo\n   ```\n\n   bar\n";
        const expected: string = "<ol>\n<li>\n<pre><code>foo\n</code></pre>\n<p>bar</p>\n</li>\n</ol>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-295>", () => {
        const markdown: string = "* foo\n  * bar\n\n  baz\n";
        const expected: string = "<ul>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n<p>baz</p>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-296>", () => {
        const markdown: string = "- a\n  - b\n  - c\n\n- d\n  - e\n  - f\n";
        const expected: string = "<ul>\n<li>\n<p>a</p>\n<ul>\n<li>b</li>\n<li>c</li>\n</ul>\n</li>\n<li>\n<p>d</p>\n<ul>\n<li>e</li>\n<li>f</li>\n</ul>\n</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Inlines", () => {
    it("<https://spec.commonmark.org/0.29/#example-297>", () => {
        const markdown: string = "`hi`lo`\n";
        const expected: string = "<p><code>hi</code>lo`</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Backslash escapes", () => {
    it("<https://spec.commonmark.org/0.29/#example-298>", () => {
        const markdown: string = "\\!\\\"\\#\\$\\%\\&\\'\\(\\)\\*\\+\\,\\-\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\\\\\]\\^\\_\\`\\{\\|\\}\\~\n";
        const expected: string = "<p>!&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-299>", () => {
        const markdown: string = "\\\t\\A\\a\\ \\3\\φ\\«\n";
        const expected: string = "<p>\\\t\\A\\a\\ \\3\\φ\\«</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-300>", () => {
        const markdown: string = "\\*not emphasized*\n\\<br/> not a tag\n\\[not a link](/foo)\n\\`not code`\n1\\. not a list\n\\* not a list\n\\# not a heading\n\\[foo]: /url \"not a reference\"\n\\&ouml; not a character entity\n";
        const expected: string = "<p>*not emphasized*\n&lt;br/&gt; not a tag\n[not a link](/foo)\n`not code`\n1. not a list\n* not a list\n# not a heading\n[foo]: /url &quot;not a reference&quot;\n&amp;ouml; not a character entity</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-301>", () => {
        const markdown: string = "\\\\*emphasis*\n";
        const expected: string = "<p>\\<em>emphasis</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-302>", () => {
        const markdown: string = "foo\\\nbar\n";
        const expected: string = "<p>foo<br />\nbar</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-303>", () => {
        const markdown: string = "`` \\[\\` ``\n";
        const expected: string = "<p><code>\\[\\`</code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-304>", () => {
        const markdown: string = "    \\[\\]\n";
        const expected: string = "<pre><code>\\[\\]\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-305>", () => {
        const markdown: string = "~~~\n\\[\\]\n~~~\n";
        const expected: string = "<pre><code>\\[\\]\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-306>", () => {
        const markdown: string = "<http://example.com?find=\\*>\n";
        const expected: string = "<p><a href=\"http://example.com?find=%5C*\">http://example.com?find=\\*</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-307>", () => {
        const markdown: string = "<a href=\"/bar\\/)\">\n";
        const expected: string = "<a href=\"/bar\\/)\">\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-308>", () => {
        const markdown: string = "[foo](/bar\\* \"ti\\*tle\")\n";
        const expected: string = "<p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-309>", () => {
        const markdown: string = "[foo]\n\n[foo]: /bar\\* \"ti\\*tle\"\n";
        const expected: string = "<p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-310>", () => {
        const markdown: string = "``` foo\\+bar\nfoo\n```\n";
        const expected: string = "<pre><code class=\"language-foo+bar\">foo\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Entity and numeric character references", () => {
    it("<https://spec.commonmark.org/0.29/#example-311>", () => {
        const markdown: string = "&nbsp; &amp; &copy; &AElig; &Dcaron;\n&frac34; &HilbertSpace; &DifferentialD;\n&ClockwiseContourIntegral; &ngE;\n";
        const expected: string = "<p>  &amp; © Æ Ď\n¾ ℋ ⅆ\n∲ ≧̸</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-312>", () => {
        const markdown: string = "&#35; &#1234; &#992; &#0;\n";
        const expected: string = "<p># Ӓ Ϡ �</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-313>", () => {
        const markdown: string = "&#X22; &#XD06; &#xcab;\n";
        const expected: string = "<p>&quot; ആ ಫ</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-314>", () => {
        const markdown: string = "&nbsp &x; &#; &#x;\n&#987654321;\n&#abcdef0;\n&ThisIsNotDefined; &hi?;\n";
        const expected: string = "<p>&amp;nbsp &amp;x; &amp;#; &amp;#x;\n&amp;#987654321;\n&amp;#abcdef0;\n&amp;ThisIsNotDefined; &amp;hi?;</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-315>", () => {
        const markdown: string = "&copy\n";
        const expected: string = "<p>&amp;copy</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-316>", () => {
        const markdown: string = "&MadeUpEntity;\n";
        const expected: string = "<p>&amp;MadeUpEntity;</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-317>", () => {
        const markdown: string = "<a href=\"&ouml;&ouml;.html\">\n";
        const expected: string = "<a href=\"&ouml;&ouml;.html\">\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-318>", () => {
        const markdown: string = "[foo](/f&ouml;&ouml; \"f&ouml;&ouml;\")\n";
        const expected: string = "<p><a href=\"/f%C3%B6%C3%B6\" title=\"föö\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-319>", () => {
        const markdown: string = "[foo]\n\n[foo]: /f&ouml;&ouml; \"f&ouml;&ouml;\"\n";
        const expected: string = "<p><a href=\"/f%C3%B6%C3%B6\" title=\"föö\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-320>", () => {
        const markdown: string = "``` f&ouml;&ouml;\nfoo\n```\n";
        const expected: string = "<pre><code class=\"language-föö\">foo\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-321>", () => {
        const markdown: string = "`f&ouml;&ouml;`\n";
        const expected: string = "<p><code>f&amp;ouml;&amp;ouml;</code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-322>", () => {
        const markdown: string = "    f&ouml;f&ouml;\n";
        const expected: string = "<pre><code>f&amp;ouml;f&amp;ouml;\n</code></pre>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-323>", () => {
        const markdown: string = "&#42;foo&#42;\n*foo*\n";
        const expected: string = "<p>*foo*\n<em>foo</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-324>", () => {
        const markdown: string = "&#42; foo\n\n* foo\n";
        const expected: string = "<p>* foo</p>\n<ul>\n<li>foo</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-325>", () => {
        const markdown: string = "foo&#10;&#10;bar\n";
        const expected: string = "<p>foo\n\nbar</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-326>", () => {
        const markdown: string = "&#9;foo\n";
        const expected: string = "<p>\tfoo</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-327>", () => {
        const markdown: string = "[a](url &quot;tit&quot;)\n";
        const expected: string = "<p>[a](url &quot;tit&quot;)</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Code spans", () => {
    it("<https://spec.commonmark.org/0.29/#example-328>", () => {
        const markdown: string = "`foo`\n";
        const expected: string = "<p><code>foo</code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-329>", () => {
        const markdown: string = "`` foo ` bar ``\n";
        const expected: string = "<p><code>foo ` bar</code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-330>", () => {
        const markdown: string = "` `` `\n";
        const expected: string = "<p><code>``</code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-331>", () => {
        const markdown: string = "`  ``  `\n";
        const expected: string = "<p><code> `` </code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-332>", () => {
        const markdown: string = "` a`\n";
        const expected: string = "<p><code> a</code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-333>", () => {
        const markdown: string = "` b `\n";
        const expected: string = "<p><code> b </code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-334>", () => {
        const markdown: string = "` `\n`  `\n";
        const expected: string = "<p><code> </code>\n<code>  </code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-335>", () => {
        const markdown: string = "``\nfoo\nbar  \nbaz\n``\n";
        const expected: string = "<p><code>foo bar   baz</code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-336>", () => {
        const markdown: string = "``\nfoo \n``\n";
        const expected: string = "<p><code>foo </code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-337>", () => {
        const markdown: string = "`foo   bar \nbaz`\n";
        const expected: string = "<p><code>foo   bar  baz</code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-338>", () => {
        const markdown: string = "`foo\\`bar`\n";
        const expected: string = "<p><code>foo\\</code>bar`</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-339>", () => {
        const markdown: string = "``foo`bar``\n";
        const expected: string = "<p><code>foo`bar</code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-340>", () => {
        const markdown: string = "` foo `` bar `\n";
        const expected: string = "<p><code>foo `` bar</code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-341>", () => {
        const markdown: string = "*foo`*`\n";
        const expected: string = "<p>*foo<code>*</code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-342>", () => {
        const markdown: string = "[not a `link](/foo`)\n";
        const expected: string = "<p>[not a <code>link](/foo</code>)</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-343>", () => {
        const markdown: string = "`<a href=\"`\">`\n";
        const expected: string = "<p><code>&lt;a href=&quot;</code>&quot;&gt;`</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-344>", () => {
        const markdown: string = "<a href=\"`\">`\n";
        const expected: string = "<p><a href=\"`\">`</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-345>", () => {
        const markdown: string = "`<http://foo.bar.`baz>`\n";
        const expected: string = "<p><code>&lt;http://foo.bar.</code>baz&gt;`</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-346>", () => {
        const markdown: string = "<http://foo.bar.`baz>`\n";
        const expected: string = "<p><a href=\"http://foo.bar.%60baz\">http://foo.bar.`baz</a>`</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-347>", () => {
        const markdown: string = "```foo``\n";
        const expected: string = "<p>```foo``</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-348>", () => {
        const markdown: string = "`foo\n";
        const expected: string = "<p>`foo</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-349>", () => {
        const markdown: string = "`foo``bar``\n";
        const expected: string = "<p>`foo<code>bar</code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Emphasis and strong emphasis", () => {
    it("<https://spec.commonmark.org/0.29/#example-350>", () => {
        const markdown: string = "*foo bar*\n";
        const expected: string = "<p><em>foo bar</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-351>", () => {
        const markdown: string = "a * foo bar*\n";
        const expected: string = "<p>a * foo bar*</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-352>", () => {
        const markdown: string = "a*\"foo\"*\n";
        const expected: string = "<p>a*&quot;foo&quot;*</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-353>", () => {
        const markdown: string = "* a *\n";
        const expected: string = "<p>* a *</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-354>", () => {
        const markdown: string = "foo*bar*\n";
        const expected: string = "<p>foo<em>bar</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-355>", () => {
        const markdown: string = "5*6*78\n";
        const expected: string = "<p>5<em>6</em>78</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-356>", () => {
        const markdown: string = "_foo bar_\n";
        const expected: string = "<p><em>foo bar</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-357>", () => {
        const markdown: string = "_ foo bar_\n";
        const expected: string = "<p>_ foo bar_</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-358>", () => {
        const markdown: string = "a_\"foo\"_\n";
        const expected: string = "<p>a_&quot;foo&quot;_</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-359>", () => {
        const markdown: string = "foo_bar_\n";
        const expected: string = "<p>foo_bar_</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-360>", () => {
        const markdown: string = "5_6_78\n";
        const expected: string = "<p>5_6_78</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-361>", () => {
        const markdown: string = "пристаням_стремятся_\n";
        const expected: string = "<p>пристаням_стремятся_</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-362>", () => {
        const markdown: string = "aa_\"bb\"_cc\n";
        const expected: string = "<p>aa_&quot;bb&quot;_cc</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-363>", () => {
        const markdown: string = "foo-_(bar)_\n";
        const expected: string = "<p>foo-<em>(bar)</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-364>", () => {
        const markdown: string = "_foo*\n";
        const expected: string = "<p>_foo*</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-365>", () => {
        const markdown: string = "*foo bar *\n";
        const expected: string = "<p>*foo bar *</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-366>", () => {
        const markdown: string = "*foo bar\n*\n";
        const expected: string = "<p>*foo bar\n*</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-367>", () => {
        const markdown: string = "*(*foo)\n";
        const expected: string = "<p>*(*foo)</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-368>", () => {
        const markdown: string = "*(*foo*)*\n";
        const expected: string = "<p><em>(<em>foo</em>)</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-369>", () => {
        const markdown: string = "*foo*bar\n";
        const expected: string = "<p><em>foo</em>bar</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-370>", () => {
        const markdown: string = "_foo bar _\n";
        const expected: string = "<p>_foo bar _</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-371>", () => {
        const markdown: string = "_(_foo)\n";
        const expected: string = "<p>_(_foo)</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-372>", () => {
        const markdown: string = "_(_foo_)_\n";
        const expected: string = "<p><em>(<em>foo</em>)</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-373>", () => {
        const markdown: string = "_foo_bar\n";
        const expected: string = "<p>_foo_bar</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-374>", () => {
        const markdown: string = "_пристаням_стремятся\n";
        const expected: string = "<p>_пристаням_стремятся</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-375>", () => {
        const markdown: string = "_foo_bar_baz_\n";
        const expected: string = "<p><em>foo_bar_baz</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-376>", () => {
        const markdown: string = "_(bar)_.\n";
        const expected: string = "<p><em>(bar)</em>.</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-377>", () => {
        const markdown: string = "**foo bar**\n";
        const expected: string = "<p><strong>foo bar</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-378>", () => {
        const markdown: string = "** foo bar**\n";
        const expected: string = "<p>** foo bar**</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-379>", () => {
        const markdown: string = "a**\"foo\"**\n";
        const expected: string = "<p>a**&quot;foo&quot;**</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-380>", () => {
        const markdown: string = "foo**bar**\n";
        const expected: string = "<p>foo<strong>bar</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-381>", () => {
        const markdown: string = "__foo bar__\n";
        const expected: string = "<p><strong>foo bar</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-382>", () => {
        const markdown: string = "__ foo bar__\n";
        const expected: string = "<p>__ foo bar__</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-383>", () => {
        const markdown: string = "__\nfoo bar__\n";
        const expected: string = "<p>__\nfoo bar__</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-384>", () => {
        const markdown: string = "a__\"foo\"__\n";
        const expected: string = "<p>a__&quot;foo&quot;__</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-385>", () => {
        const markdown: string = "foo__bar__\n";
        const expected: string = "<p>foo__bar__</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-386>", () => {
        const markdown: string = "5__6__78\n";
        const expected: string = "<p>5__6__78</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-387>", () => {
        const markdown: string = "пристаням__стремятся__\n";
        const expected: string = "<p>пристаням__стремятся__</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-388>", () => {
        const markdown: string = "__foo, __bar__, baz__\n";
        const expected: string = "<p><strong>foo, <strong>bar</strong>, baz</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-389>", () => {
        const markdown: string = "foo-__(bar)__\n";
        const expected: string = "<p>foo-<strong>(bar)</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-390>", () => {
        const markdown: string = "**foo bar **\n";
        const expected: string = "<p>**foo bar **</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-391>", () => {
        const markdown: string = "**(**foo)\n";
        const expected: string = "<p>**(**foo)</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-392>", () => {
        const markdown: string = "*(**foo**)*\n";
        const expected: string = "<p><em>(<strong>foo</strong>)</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-393>", () => {
        const markdown: string = "**Gomphocarpus (*Gomphocarpus physocarpus*, syn.\n*Asclepias physocarpa*)**\n";
        const expected: string = "<p><strong>Gomphocarpus (<em>Gomphocarpus physocarpus</em>, syn.\n<em>Asclepias physocarpa</em>)</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-394>", () => {
        const markdown: string = "**foo \"*bar*\" foo**\n";
        const expected: string = "<p><strong>foo &quot;<em>bar</em>&quot; foo</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-395>", () => {
        const markdown: string = "**foo**bar\n";
        const expected: string = "<p><strong>foo</strong>bar</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-396>", () => {
        const markdown: string = "__foo bar __\n";
        const expected: string = "<p>__foo bar __</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-397>", () => {
        const markdown: string = "__(__foo)\n";
        const expected: string = "<p>__(__foo)</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-398>", () => {
        const markdown: string = "_(__foo__)_\n";
        const expected: string = "<p><em>(<strong>foo</strong>)</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-399>", () => {
        const markdown: string = "__foo__bar\n";
        const expected: string = "<p>__foo__bar</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-400>", () => {
        const markdown: string = "__пристаням__стремятся\n";
        const expected: string = "<p>__пристаням__стремятся</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-401>", () => {
        const markdown: string = "__foo__bar__baz__\n";
        const expected: string = "<p><strong>foo__bar__baz</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-402>", () => {
        const markdown: string = "__(bar)__.\n";
        const expected: string = "<p><strong>(bar)</strong>.</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-403>", () => {
        const markdown: string = "*foo [bar](/url)*\n";
        const expected: string = "<p><em>foo <a href=\"/url\">bar</a></em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-404>", () => {
        const markdown: string = "*foo\nbar*\n";
        const expected: string = "<p><em>foo\nbar</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-405>", () => {
        const markdown: string = "_foo __bar__ baz_\n";
        const expected: string = "<p><em>foo <strong>bar</strong> baz</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-406>", () => {
        const markdown: string = "_foo _bar_ baz_\n";
        const expected: string = "<p><em>foo <em>bar</em> baz</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-407>", () => {
        const markdown: string = "__foo_ bar_\n";
        const expected: string = "<p><em><em>foo</em> bar</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-408>", () => {
        const markdown: string = "*foo *bar**\n";
        const expected: string = "<p><em>foo <em>bar</em></em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-409>", () => {
        const markdown: string = "*foo **bar** baz*\n";
        const expected: string = "<p><em>foo <strong>bar</strong> baz</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-410>", () => {
        const markdown: string = "*foo**bar**baz*\n";
        const expected: string = "<p><em>foo<strong>bar</strong>baz</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-411>", () => {
        const markdown: string = "*foo**bar*\n";
        const expected: string = "<p><em>foo**bar</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-412>", () => {
        const markdown: string = "***foo** bar*\n";
        const expected: string = "<p><em><strong>foo</strong> bar</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-413>", () => {
        const markdown: string = "*foo **bar***\n";
        const expected: string = "<p><em>foo <strong>bar</strong></em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-414>", () => {
        const markdown: string = "*foo**bar***\n";
        const expected: string = "<p><em>foo<strong>bar</strong></em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-415>", () => {
        const markdown: string = "foo***bar***baz\n";
        const expected: string = "<p>foo<em><strong>bar</strong></em>baz</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-416>", () => {
        const markdown: string = "foo******bar*********baz\n";
        const expected: string = "<p>foo<strong><strong><strong>bar</strong></strong></strong>***baz</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-417>", () => {
        const markdown: string = "*foo **bar *baz* bim** bop*\n";
        const expected: string = "<p><em>foo <strong>bar <em>baz</em> bim</strong> bop</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-418>", () => {
        const markdown: string = "*foo [*bar*](/url)*\n";
        const expected: string = "<p><em>foo <a href=\"/url\"><em>bar</em></a></em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-419>", () => {
        const markdown: string = "** is not an empty emphasis\n";
        const expected: string = "<p>** is not an empty emphasis</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-420>", () => {
        const markdown: string = "**** is not an empty strong emphasis\n";
        const expected: string = "<p>**** is not an empty strong emphasis</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-421>", () => {
        const markdown: string = "**foo [bar](/url)**\n";
        const expected: string = "<p><strong>foo <a href=\"/url\">bar</a></strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-422>", () => {
        const markdown: string = "**foo\nbar**\n";
        const expected: string = "<p><strong>foo\nbar</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-423>", () => {
        const markdown: string = "__foo _bar_ baz__\n";
        const expected: string = "<p><strong>foo <em>bar</em> baz</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-424>", () => {
        const markdown: string = "__foo __bar__ baz__\n";
        const expected: string = "<p><strong>foo <strong>bar</strong> baz</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-425>", () => {
        const markdown: string = "____foo__ bar__\n";
        const expected: string = "<p><strong><strong>foo</strong> bar</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-426>", () => {
        const markdown: string = "**foo **bar****\n";
        const expected: string = "<p><strong>foo <strong>bar</strong></strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-427>", () => {
        const markdown: string = "**foo *bar* baz**\n";
        const expected: string = "<p><strong>foo <em>bar</em> baz</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-428>", () => {
        const markdown: string = "**foo*bar*baz**\n";
        const expected: string = "<p><strong>foo<em>bar</em>baz</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-429>", () => {
        const markdown: string = "***foo* bar**\n";
        const expected: string = "<p><strong><em>foo</em> bar</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-430>", () => {
        const markdown: string = "**foo *bar***\n";
        const expected: string = "<p><strong>foo <em>bar</em></strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-431>", () => {
        const markdown: string = "**foo *bar **baz**\nbim* bop**\n";
        const expected: string = "<p><strong>foo <em>bar <strong>baz</strong>\nbim</em> bop</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-432>", () => {
        const markdown: string = "**foo [*bar*](/url)**\n";
        const expected: string = "<p><strong>foo <a href=\"/url\"><em>bar</em></a></strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-433>", () => {
        const markdown: string = "__ is not an empty emphasis\n";
        const expected: string = "<p>__ is not an empty emphasis</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-434>", () => {
        const markdown: string = "____ is not an empty strong emphasis\n";
        const expected: string = "<p>____ is not an empty strong emphasis</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-435>", () => {
        const markdown: string = "foo ***\n";
        const expected: string = "<p>foo ***</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-436>", () => {
        const markdown: string = "foo *\\**\n";
        const expected: string = "<p>foo <em>*</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-437>", () => {
        const markdown: string = "foo *_*\n";
        const expected: string = "<p>foo <em>_</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-438>", () => {
        const markdown: string = "foo *****\n";
        const expected: string = "<p>foo *****</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-439>", () => {
        const markdown: string = "foo **\\***\n";
        const expected: string = "<p>foo <strong>*</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-440>", () => {
        const markdown: string = "foo **_**\n";
        const expected: string = "<p>foo <strong>_</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-441>", () => {
        const markdown: string = "**foo*\n";
        const expected: string = "<p>*<em>foo</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-442>", () => {
        const markdown: string = "*foo**\n";
        const expected: string = "<p><em>foo</em>*</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-443>", () => {
        const markdown: string = "***foo**\n";
        const expected: string = "<p>*<strong>foo</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-444>", () => {
        const markdown: string = "****foo*\n";
        const expected: string = "<p>***<em>foo</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-445>", () => {
        const markdown: string = "**foo***\n";
        const expected: string = "<p><strong>foo</strong>*</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-446>", () => {
        const markdown: string = "*foo****\n";
        const expected: string = "<p><em>foo</em>***</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-447>", () => {
        const markdown: string = "foo ___\n";
        const expected: string = "<p>foo ___</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-448>", () => {
        const markdown: string = "foo _\\__\n";
        const expected: string = "<p>foo <em>_</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-449>", () => {
        const markdown: string = "foo _*_\n";
        const expected: string = "<p>foo <em>*</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-450>", () => {
        const markdown: string = "foo _____\n";
        const expected: string = "<p>foo _____</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-451>", () => {
        const markdown: string = "foo __\\___\n";
        const expected: string = "<p>foo <strong>_</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-452>", () => {
        const markdown: string = "foo __*__\n";
        const expected: string = "<p>foo <strong>*</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-453>", () => {
        const markdown: string = "__foo_\n";
        const expected: string = "<p>_<em>foo</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-454>", () => {
        const markdown: string = "_foo__\n";
        const expected: string = "<p><em>foo</em>_</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-455>", () => {
        const markdown: string = "___foo__\n";
        const expected: string = "<p>_<strong>foo</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-456>", () => {
        const markdown: string = "____foo_\n";
        const expected: string = "<p>___<em>foo</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-457>", () => {
        const markdown: string = "__foo___\n";
        const expected: string = "<p><strong>foo</strong>_</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-458>", () => {
        const markdown: string = "_foo____\n";
        const expected: string = "<p><em>foo</em>___</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-459>", () => {
        const markdown: string = "**foo**\n";
        const expected: string = "<p><strong>foo</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-460>", () => {
        const markdown: string = "*_foo_*\n";
        const expected: string = "<p><em><em>foo</em></em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-461>", () => {
        const markdown: string = "__foo__\n";
        const expected: string = "<p><strong>foo</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-462>", () => {
        const markdown: string = "_*foo*_\n";
        const expected: string = "<p><em><em>foo</em></em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-463>", () => {
        const markdown: string = "****foo****\n";
        const expected: string = "<p><strong><strong>foo</strong></strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-464>", () => {
        const markdown: string = "____foo____\n";
        const expected: string = "<p><strong><strong>foo</strong></strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-465>", () => {
        const markdown: string = "******foo******\n";
        const expected: string = "<p><strong><strong><strong>foo</strong></strong></strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-466>", () => {
        const markdown: string = "***foo***\n";
        const expected: string = "<p><em><strong>foo</strong></em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-467>", () => {
        const markdown: string = "_____foo_____\n";
        const expected: string = "<p><em><strong><strong>foo</strong></strong></em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-468>", () => {
        const markdown: string = "*foo _bar* baz_\n";
        const expected: string = "<p><em>foo _bar</em> baz_</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-469>", () => {
        const markdown: string = "*foo __bar *baz bim__ bam*\n";
        const expected: string = "<p><em>foo <strong>bar *baz bim</strong> bam</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-470>", () => {
        const markdown: string = "**foo **bar baz**\n";
        const expected: string = "<p>**foo <strong>bar baz</strong></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-471>", () => {
        const markdown: string = "*foo *bar baz*\n";
        const expected: string = "<p>*foo <em>bar baz</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-472>", () => {
        const markdown: string = "*[bar*](/url)\n";
        const expected: string = "<p>*<a href=\"/url\">bar*</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-473>", () => {
        const markdown: string = "_foo [bar_](/url)\n";
        const expected: string = "<p>_foo <a href=\"/url\">bar_</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-474>", () => {
        const markdown: string = "*<img src=\"foo\" title=\"*\"/>\n";
        const expected: string = "<p>*<img src=\"foo\" title=\"*\"/></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-475>", () => {
        const markdown: string = "**<a href=\"**\">\n";
        const expected: string = "<p>**<a href=\"**\"></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-476>", () => {
        const markdown: string = "__<a href=\"__\">\n";
        const expected: string = "<p>__<a href=\"__\"></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-477>", () => {
        const markdown: string = "*a `*`*\n";
        const expected: string = "<p><em>a <code>*</code></em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-478>", () => {
        const markdown: string = "_a `_`_\n";
        const expected: string = "<p><em>a <code>_</code></em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-479>", () => {
        const markdown: string = "**a<http://foo.bar/?q=**>\n";
        const expected: string = "<p>**a<a href=\"http://foo.bar/?q=**\">http://foo.bar/?q=**</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-480>", () => {
        const markdown: string = "__a<http://foo.bar/?q=__>\n";
        const expected: string = "<p>__a<a href=\"http://foo.bar/?q=__\">http://foo.bar/?q=__</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Links", () => {
    it("<https://spec.commonmark.org/0.29/#example-481>", () => {
        const markdown: string = "[link](/uri \"title\")\n";
        const expected: string = "<p><a href=\"/uri\" title=\"title\">link</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-482>", () => {
        const markdown: string = "[link](/uri)\n";
        const expected: string = "<p><a href=\"/uri\">link</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-483>", () => {
        const markdown: string = "[link]()\n";
        const expected: string = "<p><a href=\"\">link</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-484>", () => {
        const markdown: string = "[link](<>)\n";
        const expected: string = "<p><a href=\"\">link</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-485>", () => {
        const markdown: string = "[link](/my uri)\n";
        const expected: string = "<p>[link](/my uri)</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-486>", () => {
        const markdown: string = "[link](</my uri>)\n";
        const expected: string = "<p><a href=\"/my%20uri\">link</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-487>", () => {
        const markdown: string = "[link](foo\nbar)\n";
        const expected: string = "<p>[link](foo\nbar)</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-488>", () => {
        const markdown: string = "[link](<foo\nbar>)\n";
        const expected: string = "<p>[link](<foo\nbar>)</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-489>", () => {
        const markdown: string = "[a](<b)c>)\n";
        const expected: string = "<p><a href=\"b)c\">a</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-490>", () => {
        const markdown: string = "[link](<foo\\>)\n";
        const expected: string = "<p>[link](&lt;foo&gt;)</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-491>", () => {
        const markdown: string = "[a](<b)c\n[a](<b)c>\n[a](<b>c)\n";
        const expected: string = "<p>[a](&lt;b)c\n[a](&lt;b)c&gt;\n[a](<b>c)</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-492>", () => {
        const markdown: string = "[link](\\(foo\\))\n";
        const expected: string = "<p><a href=\"(foo)\">link</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-493>", () => {
        const markdown: string = "[link](foo(and(bar)))\n";
        const expected: string = "<p><a href=\"foo(and(bar))\">link</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-494>", () => {
        const markdown: string = "[link](foo\\(and\\(bar\\))\n";
        const expected: string = "<p><a href=\"foo(and(bar)\">link</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-495>", () => {
        const markdown: string = "[link](<foo(and(bar)>)\n";
        const expected: string = "<p><a href=\"foo(and(bar)\">link</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-496>", () => {
        const markdown: string = "[link](foo\\)\\:)\n";
        const expected: string = "<p><a href=\"foo):\">link</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-497>", () => {
        const markdown: string = "[link](#fragment)\n\n[link](http://example.com#fragment)\n\n[link](http://example.com?foo=3#frag)\n";
        const expected: string = "<p><a href=\"#fragment\">link</a></p>\n<p><a href=\"http://example.com#fragment\">link</a></p>\n<p><a href=\"http://example.com?foo=3#frag\">link</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-498>", () => {
        const markdown: string = "[link](foo\\bar)\n";
        const expected: string = "<p><a href=\"foo%5Cbar\">link</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-499>", () => {
        const markdown: string = "[link](foo%20b&auml;)\n";
        const expected: string = "<p><a href=\"foo%20b%C3%A4\">link</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-500>", () => {
        const markdown: string = "[link](\"title\")\n";
        const expected: string = "<p><a href=\"%22title%22\">link</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-501>", () => {
        const markdown: string = "[link](/url \"title\")\n[link](/url 'title')\n[link](/url (title))\n";
        const expected: string = "<p><a href=\"/url\" title=\"title\">link</a>\n<a href=\"/url\" title=\"title\">link</a>\n<a href=\"/url\" title=\"title\">link</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-502>", () => {
        const markdown: string = "[link](/url \"title \\\"&quot;\")\n";
        const expected: string = "<p><a href=\"/url\" title=\"title &quot;&quot;\">link</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-503>", () => {
        const markdown: string = "[link](/url \"title\")\n";
        const expected: string = "<p><a href=\"/url%C2%A0%22title%22\">link</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-504>", () => {
        const markdown: string = "[link](/url \"title \"and\" title\")\n";
        const expected: string = "<p>[link](/url &quot;title &quot;and&quot; title&quot;)</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-505>", () => {
        const markdown: string = "[link](/url 'title \"and\" title')\n";
        const expected: string = "<p><a href=\"/url\" title=\"title &quot;and&quot; title\">link</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-506>", () => {
        const markdown: string = "[link](   /uri\n  \"title\"  )\n";
        const expected: string = "<p><a href=\"/uri\" title=\"title\">link</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-507>", () => {
        const markdown: string = "[link] (/uri)\n";
        const expected: string = "<p>[link] (/uri)</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-508>", () => {
        const markdown: string = "[link [foo [bar]]](/uri)\n";
        const expected: string = "<p><a href=\"/uri\">link [foo [bar]]</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-509>", () => {
        const markdown: string = "[link] bar](/uri)\n";
        const expected: string = "<p>[link] bar](/uri)</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-510>", () => {
        const markdown: string = "[link [bar](/uri)\n";
        const expected: string = "<p>[link <a href=\"/uri\">bar</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-511>", () => {
        const markdown: string = "[link \\[bar](/uri)\n";
        const expected: string = "<p><a href=\"/uri\">link [bar</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-512>", () => {
        const markdown: string = "[link *foo **bar** `#`*](/uri)\n";
        const expected: string = "<p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-513>", () => {
        const markdown: string = "[![moon](moon.jpg)](/uri)\n";
        const expected: string = "<p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-514>", () => {
        const markdown: string = "[foo [bar](/uri)](/uri)\n";
        const expected: string = "<p>[foo <a href=\"/uri\">bar</a>](/uri)</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-515>", () => {
        const markdown: string = "[foo *[bar [baz](/uri)](/uri)*](/uri)\n";
        const expected: string = "<p>[foo <em>[bar <a href=\"/uri\">baz</a>](/uri)</em>](/uri)</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-516>", () => {
        const markdown: string = "![[[foo](uri1)](uri2)](uri3)\n";
        const expected: string = "<p><img src=\"uri3\" alt=\"[foo](uri2)\" /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-517>", () => {
        const markdown: string = "*[foo*](/uri)\n";
        const expected: string = "<p>*<a href=\"/uri\">foo*</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-518>", () => {
        const markdown: string = "[foo *bar](baz*)\n";
        const expected: string = "<p><a href=\"baz*\">foo *bar</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-519>", () => {
        const markdown: string = "*foo [bar* baz]\n";
        const expected: string = "<p><em>foo [bar</em> baz]</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-520>", () => {
        const markdown: string = "[foo <bar attr=\"](baz)\">\n";
        const expected: string = "<p>[foo <bar attr=\"](baz)\"></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-521>", () => {
        const markdown: string = "[foo`](/uri)`\n";
        const expected: string = "<p>[foo<code>](/uri)</code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-522>", () => {
        const markdown: string = "[foo<http://example.com/?search=](uri)>\n";
        const expected: string = "<p>[foo<a href=\"http://example.com/?search=%5D(uri)\">http://example.com/?search=](uri)</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-523>", () => {
        const markdown: string = "[foo][bar]\n\n[bar]: /url \"title\"\n";
        const expected: string = "<p><a href=\"/url\" title=\"title\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-524>", () => {
        const markdown: string = "[link [foo [bar]]][ref]\n\n[ref]: /uri\n";
        const expected: string = "<p><a href=\"/uri\">link [foo [bar]]</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-525>", () => {
        const markdown: string = "[link \\[bar][ref]\n\n[ref]: /uri\n";
        const expected: string = "<p><a href=\"/uri\">link [bar</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-526>", () => {
        const markdown: string = "[link *foo **bar** `#`*][ref]\n\n[ref]: /uri\n";
        const expected: string = "<p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-527>", () => {
        const markdown: string = "[![moon](moon.jpg)][ref]\n\n[ref]: /uri\n";
        const expected: string = "<p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-528>", () => {
        const markdown: string = "[foo [bar](/uri)][ref]\n\n[ref]: /uri\n";
        const expected: string = "<p>[foo <a href=\"/uri\">bar</a>]<a href=\"/uri\">ref</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-529>", () => {
        const markdown: string = "[foo *bar [baz][ref]*][ref]\n\n[ref]: /uri\n";
        const expected: string = "<p>[foo <em>bar <a href=\"/uri\">baz</a></em>]<a href=\"/uri\">ref</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-530>", () => {
        const markdown: string = "*[foo*][ref]\n\n[ref]: /uri\n";
        const expected: string = "<p>*<a href=\"/uri\">foo*</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-531>", () => {
        const markdown: string = "[foo *bar][ref]\n\n[ref]: /uri\n";
        const expected: string = "<p><a href=\"/uri\">foo *bar</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-532>", () => {
        const markdown: string = "[foo <bar attr=\"][ref]\">\n\n[ref]: /uri\n";
        const expected: string = "<p>[foo <bar attr=\"][ref]\"></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-533>", () => {
        const markdown: string = "[foo`][ref]`\n\n[ref]: /uri\n";
        const expected: string = "<p>[foo<code>][ref]</code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-534>", () => {
        const markdown: string = "[foo<http://example.com/?search=][ref]>\n\n[ref]: /uri\n";
        const expected: string = "<p>[foo<a href=\"http://example.com/?search=%5D%5Bref%5D\">http://example.com/?search=][ref]</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-535>", () => {
        const markdown: string = "[foo][BaR]\n\n[bar]: /url \"title\"\n";
        const expected: string = "<p><a href=\"/url\" title=\"title\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-536>", () => {
        const markdown: string = "[Толпой][Толпой] is a Russian word.\n\n[ТОЛПОЙ]: /url\n";
        const expected: string = "<p><a href=\"/url\">Толпой</a> is a Russian word.</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-537>", () => {
        const markdown: string = "[Foo\n  bar]: /url\n\n[Baz][Foo bar]\n";
        const expected: string = "<p><a href=\"/url\">Baz</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-538>", () => {
        const markdown: string = "[foo] [bar]\n\n[bar]: /url \"title\"\n";
        const expected: string = "<p>[foo] <a href=\"/url\" title=\"title\">bar</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-539>", () => {
        const markdown: string = "[foo]\n[bar]\n\n[bar]: /url \"title\"\n";
        const expected: string = "<p>[foo]\n<a href=\"/url\" title=\"title\">bar</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-540>", () => {
        const markdown: string = "[foo]: /url1\n\n[foo]: /url2\n\n[bar][foo]\n";
        const expected: string = "<p><a href=\"/url1\">bar</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-541>", () => {
        const markdown: string = "[bar][foo\\!]\n\n[foo!]: /url\n";
        const expected: string = "<p>[bar][foo!]</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-542>", () => {
        const markdown: string = "[foo][ref[]\n\n[ref[]: /uri\n";
        const expected: string = "<p>[foo][ref[]</p>\n<p>[ref[]: /uri</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-543>", () => {
        const markdown: string = "[foo][ref[bar]]\n\n[ref[bar]]: /uri\n";
        const expected: string = "<p>[foo][ref[bar]]</p>\n<p>[ref[bar]]: /uri</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-544>", () => {
        const markdown: string = "[[[foo]]]\n\n[[[foo]]]: /url\n";
        const expected: string = "<p>[[[foo]]]</p>\n<p>[[[foo]]]: /url</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-545>", () => {
        const markdown: string = "[foo][ref\\[]\n\n[ref\\[]: /uri\n";
        const expected: string = "<p><a href=\"/uri\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-546>", () => {
        const markdown: string = "[bar\\\\]: /uri\n\n[bar\\\\]\n";
        const expected: string = "<p><a href=\"/uri\">bar\\</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-547>", () => {
        const markdown: string = "[]\n\n[]: /uri\n";
        const expected: string = "<p>[]</p>\n<p>[]: /uri</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-548>", () => {
        const markdown: string = "[\n ]\n\n[\n ]: /uri\n";
        const expected: string = "<p>[\n]</p>\n<p>[\n]: /uri</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-549>", () => {
        const markdown: string = "[foo][]\n\n[foo]: /url \"title\"\n";
        const expected: string = "<p><a href=\"/url\" title=\"title\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-550>", () => {
        const markdown: string = "[*foo* bar][]\n\n[*foo* bar]: /url \"title\"\n";
        const expected: string = "<p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-551>", () => {
        const markdown: string = "[Foo][]\n\n[foo]: /url \"title\"\n";
        const expected: string = "<p><a href=\"/url\" title=\"title\">Foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-552>", () => {
        const markdown: string = "[foo] \n[]\n\n[foo]: /url \"title\"\n";
        const expected: string = "<p><a href=\"/url\" title=\"title\">foo</a>\n[]</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-553>", () => {
        const markdown: string = "[foo]\n\n[foo]: /url \"title\"\n";
        const expected: string = "<p><a href=\"/url\" title=\"title\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-554>", () => {
        const markdown: string = "[*foo* bar]\n\n[*foo* bar]: /url \"title\"\n";
        const expected: string = "<p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-555>", () => {
        const markdown: string = "[[*foo* bar]]\n\n[*foo* bar]: /url \"title\"\n";
        const expected: string = "<p>[<a href=\"/url\" title=\"title\"><em>foo</em> bar</a>]</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-556>", () => {
        const markdown: string = "[[bar [foo]\n\n[foo]: /url\n";
        const expected: string = "<p>[[bar <a href=\"/url\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-557>", () => {
        const markdown: string = "[Foo]\n\n[foo]: /url \"title\"\n";
        const expected: string = "<p><a href=\"/url\" title=\"title\">Foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-558>", () => {
        const markdown: string = "[foo] bar\n\n[foo]: /url\n";
        const expected: string = "<p><a href=\"/url\">foo</a> bar</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-559>", () => {
        const markdown: string = "\\[foo]\n\n[foo]: /url \"title\"\n";
        const expected: string = "<p>[foo]</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-560>", () => {
        const markdown: string = "[foo*]: /url\n\n*[foo*]\n";
        const expected: string = "<p>*<a href=\"/url\">foo*</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-561>", () => {
        const markdown: string = "[foo][bar]\n\n[foo]: /url1\n[bar]: /url2\n";
        const expected: string = "<p><a href=\"/url2\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-562>", () => {
        const markdown: string = "[foo][]\n\n[foo]: /url1\n";
        const expected: string = "<p><a href=\"/url1\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-563>", () => {
        const markdown: string = "[foo]()\n\n[foo]: /url1\n";
        const expected: string = "<p><a href=\"\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-564>", () => {
        const markdown: string = "[foo](not a link)\n\n[foo]: /url1\n";
        const expected: string = "<p><a href=\"/url1\">foo</a>(not a link)</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-565>", () => {
        const markdown: string = "[foo][bar][baz]\n\n[baz]: /url\n";
        const expected: string = "<p>[foo]<a href=\"/url\">bar</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-566>", () => {
        const markdown: string = "[foo][bar][baz]\n\n[baz]: /url1\n[bar]: /url2\n";
        const expected: string = "<p><a href=\"/url2\">foo</a><a href=\"/url1\">baz</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-567>", () => {
        const markdown: string = "[foo][bar][baz]\n\n[baz]: /url1\n[foo]: /url2\n";
        const expected: string = "<p>[foo]<a href=\"/url1\">bar</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Images", () => {
    it("<https://spec.commonmark.org/0.29/#example-568>", () => {
        const markdown: string = "![foo](/url \"title\")\n";
        const expected: string = "<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-569>", () => {
        const markdown: string = "![foo *bar*]\n\n[foo *bar*]: train.jpg \"train & tracks\"\n";
        const expected: string = "<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-570>", () => {
        const markdown: string = "![foo ![bar](/url)](/url2)\n";
        const expected: string = "<p><img src=\"/url2\" alt=\"foo bar\" /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-571>", () => {
        const markdown: string = "![foo [bar](/url)](/url2)\n";
        const expected: string = "<p><img src=\"/url2\" alt=\"foo bar\" /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-572>", () => {
        const markdown: string = "![foo *bar*][]\n\n[foo *bar*]: train.jpg \"train & tracks\"\n";
        const expected: string = "<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-573>", () => {
        const markdown: string = "![foo *bar*][foobar]\n\n[FOOBAR]: train.jpg \"train & tracks\"\n";
        const expected: string = "<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-574>", () => {
        const markdown: string = "![foo](train.jpg)\n";
        const expected: string = "<p><img src=\"train.jpg\" alt=\"foo\" /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-575>", () => {
        const markdown: string = "My ![foo bar](/path/to/train.jpg  \"title\"   )\n";
        const expected: string = "<p>My <img src=\"/path/to/train.jpg\" alt=\"foo bar\" title=\"title\" /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-576>", () => {
        const markdown: string = "![foo](<url>)\n";
        const expected: string = "<p><img src=\"url\" alt=\"foo\" /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-577>", () => {
        const markdown: string = "![](/url)\n";
        const expected: string = "<p><img src=\"/url\" alt=\"\" /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-578>", () => {
        const markdown: string = "![foo][bar]\n\n[bar]: /url\n";
        const expected: string = "<p><img src=\"/url\" alt=\"foo\" /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-579>", () => {
        const markdown: string = "![foo][bar]\n\n[BAR]: /url\n";
        const expected: string = "<p><img src=\"/url\" alt=\"foo\" /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-580>", () => {
        const markdown: string = "![foo][]\n\n[foo]: /url \"title\"\n";
        const expected: string = "<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-581>", () => {
        const markdown: string = "![*foo* bar][]\n\n[*foo* bar]: /url \"title\"\n";
        const expected: string = "<p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-582>", () => {
        const markdown: string = "![Foo][]\n\n[foo]: /url \"title\"\n";
        const expected: string = "<p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-583>", () => {
        const markdown: string = "![foo] \n[]\n\n[foo]: /url \"title\"\n";
        const expected: string = "<p><img src=\"/url\" alt=\"foo\" title=\"title\" />\n[]</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-584>", () => {
        const markdown: string = "![foo]\n\n[foo]: /url \"title\"\n";
        const expected: string = "<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-585>", () => {
        const markdown: string = "![*foo* bar]\n\n[*foo* bar]: /url \"title\"\n";
        const expected: string = "<p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-586>", () => {
        const markdown: string = "![[foo]]\n\n[[foo]]: /url \"title\"\n";
        const expected: string = "<p>![[foo]]</p>\n<p>[[foo]]: /url &quot;title&quot;</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-587>", () => {
        const markdown: string = "![Foo]\n\n[foo]: /url \"title\"\n";
        const expected: string = "<p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-588>", () => {
        const markdown: string = "!\\[foo]\n\n[foo]: /url \"title\"\n";
        const expected: string = "<p>![foo]</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-589>", () => {
        const markdown: string = "\\![foo]\n\n[foo]: /url \"title\"\n";
        const expected: string = "<p>!<a href=\"/url\" title=\"title\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Autolinks", () => {
    it("<https://spec.commonmark.org/0.29/#example-590>", () => {
        const markdown: string = "<http://foo.bar.baz>\n";
        const expected: string = "<p><a href=\"http://foo.bar.baz\">http://foo.bar.baz</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-591>", () => {
        const markdown: string = "<http://foo.bar.baz/test?q=hello&id=22&boolean>\n";
        const expected: string = "<p><a href=\"http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean\">http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-592>", () => {
        const markdown: string = "<irc://foo.bar:2233/baz>\n";
        const expected: string = "<p><a href=\"irc://foo.bar:2233/baz\">irc://foo.bar:2233/baz</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-593>", () => {
        const markdown: string = "<MAILTO:FOO@BAR.BAZ>\n";
        const expected: string = "<p><a href=\"MAILTO:FOO@BAR.BAZ\">MAILTO:FOO@BAR.BAZ</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-594>", () => {
        const markdown: string = "<a+b+c:d>\n";
        const expected: string = "<p><a href=\"a+b+c:d\">a+b+c:d</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-595>", () => {
        const markdown: string = "<made-up-scheme://foo,bar>\n";
        const expected: string = "<p><a href=\"made-up-scheme://foo,bar\">made-up-scheme://foo,bar</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-596>", () => {
        const markdown: string = "<http://../>\n";
        const expected: string = "<p><a href=\"http://../\">http://../</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-597>", () => {
        const markdown: string = "<localhost:5001/foo>\n";
        const expected: string = "<p><a href=\"localhost:5001/foo\">localhost:5001/foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-598>", () => {
        const markdown: string = "<http://foo.bar/baz bim>\n";
        const expected: string = "<p>&lt;http://foo.bar/baz bim&gt;</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-599>", () => {
        const markdown: string = "<http://example.com/\\[\\>\n";
        const expected: string = "<p><a href=\"http://example.com/%5C%5B%5C\">http://example.com/\\[\\</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-600>", () => {
        const markdown: string = "<foo@bar.example.com>\n";
        const expected: string = "<p><a href=\"mailto:foo@bar.example.com\">foo@bar.example.com</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-601>", () => {
        const markdown: string = "<foo+special@Bar.baz-bar0.com>\n";
        const expected: string = "<p><a href=\"mailto:foo+special@Bar.baz-bar0.com\">foo+special@Bar.baz-bar0.com</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-602>", () => {
        const markdown: string = "<foo\\+@bar.example.com>\n";
        const expected: string = "<p>&lt;foo+@bar.example.com&gt;</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-603>", () => {
        const markdown: string = "<>\n";
        const expected: string = "<p>&lt;&gt;</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-604>", () => {
        const markdown: string = "< http://foo.bar >\n";
        const expected: string = "<p>&lt; http://foo.bar &gt;</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-605>", () => {
        const markdown: string = "<m:abc>\n";
        const expected: string = "<p>&lt;m:abc&gt;</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-606>", () => {
        const markdown: string = "<foo.bar.baz>\n";
        const expected: string = "<p>&lt;foo.bar.baz&gt;</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-607>", () => {
        const markdown: string = "http://example.com\n";
        const expected: string = "<p>http://example.com</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-608>", () => {
        const markdown: string = "foo@bar.example.com\n";
        const expected: string = "<p>foo@bar.example.com</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Raw HTML", () => {
    it("<https://spec.commonmark.org/0.29/#example-609>", () => {
        const markdown: string = "<a><bab><c2c>\n";
        const expected: string = "<p><a><bab><c2c></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-610>", () => {
        const markdown: string = "<a/><b2/>\n";
        const expected: string = "<p><a/><b2/></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-611>", () => {
        const markdown: string = "<a  /><b2\ndata=\"foo\" >\n";
        const expected: string = "<p><a  /><b2\ndata=\"foo\" ></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-612>", () => {
        const markdown: string = "<a foo=\"bar\" bam = 'baz <em>\"</em>'\n_boolean zoop:33=zoop:33 />\n";
        const expected: string = "<p><a foo=\"bar\" bam = 'baz <em>\"</em>'\n_boolean zoop:33=zoop:33 /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-613>", () => {
        const markdown: string = "Foo <responsive-image src=\"foo.jpg\" />\n";
        const expected: string = "<p>Foo <responsive-image src=\"foo.jpg\" /></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-614>", () => {
        const markdown: string = "<33> <__>\n";
        const expected: string = "<p>&lt;33&gt; &lt;__&gt;</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-615>", () => {
        const markdown: string = "<a h*#ref=\"hi\">\n";
        const expected: string = "<p>&lt;a h*#ref=&quot;hi&quot;&gt;</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-616>", () => {
        const markdown: string = "<a href=\"hi'> <a href=hi'>\n";
        const expected: string = "<p>&lt;a href=&quot;hi'&gt; &lt;a href=hi'&gt;</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-617>", () => {
        const markdown: string = "< a><\nfoo><bar/ >\n<foo bar=baz\nbim!bop />\n";
        const expected: string = "<p>&lt; a&gt;&lt;\nfoo&gt;&lt;bar/ &gt;\n&lt;foo bar=baz\nbim!bop /&gt;</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-618>", () => {
        const markdown: string = "<a href='bar'title=title>\n";
        const expected: string = "<p>&lt;a href='bar'title=title&gt;</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-619>", () => {
        const markdown: string = "</a></foo >\n";
        const expected: string = "<p></a></foo ></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-620>", () => {
        const markdown: string = "</a href=\"foo\">\n";
        const expected: string = "<p>&lt;/a href=&quot;foo&quot;&gt;</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-621>", () => {
        const markdown: string = "foo <!-- this is a\ncomment - with hyphen -->\n";
        const expected: string = "<p>foo <!-- this is a\ncomment - with hyphen --></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-622>", () => {
        const markdown: string = "foo <!-- not a comment -- two hyphens -->\n";
        const expected: string = "<p>foo &lt;!-- not a comment -- two hyphens --&gt;</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-623>", () => {
        const markdown: string = "foo <!--> foo -->\n\nfoo <!-- foo--->\n";
        const expected: string = "<p>foo &lt;!--&gt; foo --&gt;</p>\n<p>foo &lt;!-- foo---&gt;</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-624>", () => {
        const markdown: string = "foo <?php echo $a; ?>\n";
        const expected: string = "<p>foo <?php echo $a; ?></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-625>", () => {
        const markdown: string = "foo <!ELEMENT br EMPTY>\n";
        const expected: string = "<p>foo <!ELEMENT br EMPTY></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-626>", () => {
        const markdown: string = "foo <![CDATA[>&<]]>\n";
        const expected: string = "<p>foo <![CDATA[>&<]]></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-627>", () => {
        const markdown: string = "foo <a href=\"&ouml;\">\n";
        const expected: string = "<p>foo <a href=\"&ouml;\"></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-628>", () => {
        const markdown: string = "foo <a href=\"\\*\">\n";
        const expected: string = "<p>foo <a href=\"\\*\"></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-629>", () => {
        const markdown: string = "<a href=\"\\\"\">\n";
        const expected: string = "<p>&lt;a href=&quot;&quot;&quot;&gt;</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Hard line breaks", () => {
    it("<https://spec.commonmark.org/0.29/#example-630>", () => {
        const markdown: string = "foo  \nbaz\n";
        const expected: string = "<p>foo<br />\nbaz</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-631>", () => {
        const markdown: string = "foo\\\nbaz\n";
        const expected: string = "<p>foo<br />\nbaz</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-632>", () => {
        const markdown: string = "foo       \nbaz\n";
        const expected: string = "<p>foo<br />\nbaz</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-633>", () => {
        const markdown: string = "foo  \n     bar\n";
        const expected: string = "<p>foo<br />\nbar</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-634>", () => {
        const markdown: string = "foo\\\n     bar\n";
        const expected: string = "<p>foo<br />\nbar</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-635>", () => {
        const markdown: string = "*foo  \nbar*\n";
        const expected: string = "<p><em>foo<br />\nbar</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-636>", () => {
        const markdown: string = "*foo\\\nbar*\n";
        const expected: string = "<p><em>foo<br />\nbar</em></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-637>", () => {
        const markdown: string = "`code \nspan`\n";
        const expected: string = "<p><code>code  span</code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-638>", () => {
        const markdown: string = "`code\\\nspan`\n";
        const expected: string = "<p><code>code\\ span</code></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-639>", () => {
        const markdown: string = "<a href=\"foo  \nbar\">\n";
        const expected: string = "<p><a href=\"foo  \nbar\"></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-640>", () => {
        const markdown: string = "<a href=\"foo\\\nbar\">\n";
        const expected: string = "<p><a href=\"foo\\\nbar\"></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-641>", () => {
        const markdown: string = "foo\\\n";
        const expected: string = "<p>foo\\</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-642>", () => {
        const markdown: string = "foo  \n";
        const expected: string = "<p>foo</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-643>", () => {
        const markdown: string = "### foo\\\n";
        const expected: string = "<h3>foo\\</h3>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-644>", () => {
        const markdown: string = "### foo  \n";
        const expected: string = "<h3>foo</h3>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Soft line breaks", () => {
    it("<https://spec.commonmark.org/0.29/#example-645>", () => {
        const markdown: string = "foo\nbaz\n";
        const expected: string = "<p>foo\nbaz</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-646>", () => {
        const markdown: string = "foo \n baz\n";
        const expected: string = "<p>foo\nbaz</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Textual content", () => {
    it("<https://spec.commonmark.org/0.29/#example-647>", () => {
        const markdown: string = "hello $.;'there\n";
        const expected: string = "<p>hello $.;'there</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-648>", () => {
        const markdown: string = "Foo χρῆν\n";
        const expected: string = "<p>Foo χρῆν</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://spec.commonmark.org/0.29/#example-649>", () => {
        const markdown: string = "Multiple     spaces\n";
        const expected: string = "<p>Multiple     spaces</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});