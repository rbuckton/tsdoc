// This file was autogenerated by ~/scripts/generateTests.js and should not be modified.

import { BlockParser } from "../BlockParser";
import { Document } from "../../nodes/Document";
import { SnapshotSerializer } from "./serializers";
import { HtmlEmitter } from "../../emitters/HtmlEmitter";
import { TSDocConfiguration } from "../../../configuration/TSDocConfiguration";

expect.addSnapshotSerializer(SnapshotSerializer.serializer);

function parse(text: string): Document {
    const parser: BlockParser = new BlockParser(new TSDocConfiguration(), text, undefined, true);
    return parser.parse();
}

function emit(document: Document): string {
    const emitter: HtmlEmitter = new HtmlEmitter(
        new TSDocConfiguration(),
        tagName => !/^(title|textarea|style|xmp|iframe|noembed|noframes|script|plaintext)$/i.test(tagName)
    );
    emitter.emit(document);
    return emitter.toString();
}

describe("Inline Tags (extension)", () => {
    it("Basic Inline", () => {
        const markdown: string = "{@foo bar}";
        const expected: string = "<p><span data-tagname=\"@foo\"><em>@foo</em> &mdash; <a href=\"bar\">bar</a></span></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("Basic Link", () => {
        const markdown: string = "{@link foo}";
        const expected: string = "<p><a href=\"foo\">foo</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("Link with title", () => {
        const markdown: string = "{@link foo|bar}";
        const expected: string = "<p><a href=\"foo\">bar</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("Link with title in table", () => {
        const markdown: string = "|a|\n|-|\n{@link foo\\|bar}|";
        const expected: string = "<table>\n<thead>\n<tr>\n<th>a</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"foo\">bar</a></td>\n</tr>\n</tbody>\n</table>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Block Tags (extension)", () => {
    it("Basic Block", () => {
        const markdown: string = "@remarks this is a test";
        const expected: string = "<div data-tagname=\"@remarks\"><em>@remarks</em> &mdash;\n<p>this is a test</p>\n</div>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Modifier Tags (extension)", () => {
    it("Single Modifier", () => {
        const markdown: string = "@public";
        const expected: string = "<div data-tagname=\"@public\"><em>@public</em></div>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Param Tags (extension)", () => {
    it("Basic Parameter", () => {
        const markdown: string = "@param foo bar";
        const expected: string = "<div data-tagname=\"@param\"><em>@param</em> &mdash; <code>foo</code> &mdash;\n<p>bar</p>\n</div>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});