// This file was autogenerated by ~/scripts/generateTests.js and should not be modified.

import { BlockParser } from "../BlockParser";
import { Document } from "../../nodes/Document";
import { SnapshotSerializer } from "./serializers";
import { HtmlEmitter } from "../../emitters/HtmlEmitter";

expect.addSnapshotSerializer(SnapshotSerializer.serializer);

function parse(text: string): Document {
    const parser: BlockParser = new BlockParser(text, undefined, true);
    return parser.parse();
}

function emit(document: Document): string {
    const emitter: HtmlEmitter = new HtmlEmitter(
        tagName => !/^(title|textarea|style|xmp|iframe|noembed|noframes|script|plaintext)$/i.test(tagName)
    );
    emitter.emit(document);
    return emitter.toString();
}

describe("Tables (extension)", () => {
    it("<https://github.github.com/gfm/#example-198>", () => {
        const markdown: string = "| foo | bar |\n| --- | --- |\n| baz | bim |";
        const expected: string = "<table>\n<thead>\n<tr>\n<th>foo</th>\n<th>bar</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>baz</td>\n<td>bim</td>\n</tr>\n</tbody>\n</table>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://github.github.com/gfm/#example-199>", () => {
        const markdown: string = "| abc | defghi |\n:-: | -----------:\nbar | baz";
        const expected: string = "<table>\n<thead>\n<tr>\n<th align=\"center\">abc</th>\n<th align=\"right\">defghi</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">bar</td>\n<td align=\"right\">baz</td>\n</tr>\n</tbody>\n</table>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://github.github.com/gfm/#example-200>", () => {
        const markdown: string = "| f\\|oo  |\n| ------ |\n| b `\\|` az |\n| b **\\|** im |";
        const expected: string = "<table>\n<thead>\n<tr>\n<th>f|oo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>b <code>|</code> az</td>\n</tr>\n<tr>\n<td>b <strong>|</strong> im</td>\n</tr>\n</tbody>\n</table>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://github.github.com/gfm/#example-201>", () => {
        const markdown: string = "| abc | def |\n| --- | --- |\n| bar | baz |\n> bar";
        const expected: string = "<table>\n<thead>\n<tr>\n<th>abc</th>\n<th>def</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bar</td>\n<td>baz</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>bar</p>\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://github.github.com/gfm/#example-202>", () => {
        const markdown: string = "| abc | def |\n| --- | --- |\n| bar | baz |\nbar\n\nbar";
        const expected: string = "<table>\n<thead>\n<tr>\n<th>abc</th>\n<th>def</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bar</td>\n<td>baz</td>\n</tr>\n<tr>\n<td>bar</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>bar</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://github.github.com/gfm/#example-203>", () => {
        const markdown: string = "| abc | def |\n| --- |\n| bar |";
        const expected: string = "<p>| abc | def |\n| --- |\n| bar |</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://github.github.com/gfm/#example-204>", () => {
        const markdown: string = "| abc | def |\n| --- | --- |\n| bar |\n| bar | baz | boo |";
        const expected: string = "<table>\n<thead>\n<tr>\n<th>abc</th>\n<th>def</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bar</td>\n<td></td>\n</tr>\n<tr>\n<td>bar</td>\n<td>baz</td>\n</tr>\n</tbody>\n</table>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://github.github.com/gfm/#example-205>", () => {
        const markdown: string = "| abc | def |\n| --- | --- |";
        const expected: string = "<table>\n<thead>\n<tr>\n<th>abc</th>\n<th>def</th>\n</tr>\n</thead>\n</table>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("Paragraph before table", () => {
        const markdown: string = "para\n| abc | def |\n| --- | --- |";
        const expected: string = "<p>para</p>\n<table>\n<thead>\n<tr>\n<th>abc</th>\n<th>def</th>\n</tr>\n</thead>\n</table>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Task list items (extension)", () => {
    it("<https://github.github.com/gfm/#example-279>", () => {
        const markdown: string = "- [ ] foo\n- [x] bar";
        const expected: string = "<ul>\n<li><input disabled=\"\" type=\"checkbox\"> foo</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> bar</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://github.github.com/gfm/#example-280>", () => {
        const markdown: string = "- [x] foo\n  - [ ] bar\n  - [x] baz\n- [ ] bim";
        const expected: string = "<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> foo\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> bar</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> baz</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> bim</li>\n</ul>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Strikethrough (extension)", () => {
    it("<https://github.github.com/gfm/#example-491>", () => {
        const markdown: string = "~~Hi~~ Hello, world!";
        const expected: string = "<p><del>Hi</del> Hello, world!</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://github.github.com/gfm/#example-492>", () => {
        const markdown: string = "This ~~has a\n\nnew paragraph~~.";
        const expected: string = "<p>This ~~has a</p>\n<p>new paragraph~~.</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Autolinks (extension)", () => {
    it("<https://github.github.com/gfm/#example-621>", () => {
        const markdown: string = "www.commonmark.org";
        const expected: string = "<p><a href=\"http://www.commonmark.org\">www.commonmark.org</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://github.github.com/gfm/#example-622>", () => {
        const markdown: string = "Visit www.commonmark.org/help for more information.";
        const expected: string = "<p>Visit <a href=\"http://www.commonmark.org/help\">www.commonmark.org/help</a> for more information.</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://github.github.com/gfm/#example-623>", () => {
        const markdown: string = "Visit www.commonmark.org.\n\nVisit www.commonmark.org/a.b.";
        const expected: string = "<p>Visit <a href=\"http://www.commonmark.org\">www.commonmark.org</a>.</p>\n<p>Visit <a href=\"http://www.commonmark.org/a.b\">www.commonmark.org/a.b</a>.</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://github.github.com/gfm/#example-624>", () => {
        const markdown: string = "www.google.com/search?q=Markup+(business)\n\nwww.google.com/search?q=Markup+(business)))\n\n(www.google.com/search?q=Markup+(business))\n\n(www.google.com/search?q=Markup+(business)";
        const expected: string = "<p><a href=\"http://www.google.com/search?q=Markup+(business)\">www.google.com/search?q=Markup+(business)</a></p>\n<p><a href=\"http://www.google.com/search?q=Markup+(business)\">www.google.com/search?q=Markup+(business)</a>))</p>\n<p>(<a href=\"http://www.google.com/search?q=Markup+(business)\">www.google.com/search?q=Markup+(business)</a>)</p>\n<p>(<a href=\"http://www.google.com/search?q=Markup+(business)\">www.google.com/search?q=Markup+(business)</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://github.github.com/gfm/#example-625>", () => {
        const markdown: string = "www.google.com/search?q=(business))+ok";
        const expected: string = "<p><a href=\"http://www.google.com/search?q=(business))+ok\">www.google.com/search?q=(business))+ok</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://github.github.com/gfm/#example-626>", () => {
        const markdown: string = "www.google.com/search?q=commonmark&hl=en\n\nwww.google.com/search?q=commonmark&hl;";
        const expected: string = "<p><a href=\"http://www.google.com/search?q=commonmark&amp;hl=en\">www.google.com/search?q=commonmark&amp;hl=en</a></p>\n<p><a href=\"http://www.google.com/search?q=commonmark\">www.google.com/search?q=commonmark</a>&amp;hl;</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://github.github.com/gfm/#example-627>", () => {
        const markdown: string = "www.commonmark.org/he<lp";
        const expected: string = "<p><a href=\"http://www.commonmark.org/he\">www.commonmark.org/he</a>&lt;lp</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://github.github.com/gfm/#example-628>", () => {
        const markdown: string = "http://commonmark.org\n\n(Visit https://encrypted.google.com/search?q=Markup+(business))";
        const expected: string = "<p><a href=\"http://commonmark.org\">http://commonmark.org</a></p>\n<p>(Visit <a href=\"https://encrypted.google.com/search?q=Markup+(business)\">https://encrypted.google.com/search?q=Markup+(business)</a>)</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://github.github.com/gfm/#example-629>", () => {
        const markdown: string = "foo@bar.baz";
        const expected: string = "<p><a href=\"mailto:foo@bar.baz\">foo@bar.baz</a></p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://github.github.com/gfm/#example-630>", () => {
        const markdown: string = "hello@mail+xyz.example isn't valid, but hello+xyz@mail.example is.";
        const expected: string = "<p>hello@mail+xyz.example isn't valid, but <a href=\"mailto:hello+xyz@mail.example\">hello+xyz@mail.example</a> is.</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
    it("<https://github.github.com/gfm/#example-631>", () => {
        const markdown: string = "a.b-c_d@a.b\n\na.b-c_d@a.b.\n\na.b-c_d@a.b-\n\na.b-c_d@a.b_";
        const expected: string = "<p><a href=\"mailto:a.b-c_d@a.b\">a.b-c_d@a.b</a></p>\n<p><a href=\"mailto:a.b-c_d@a.b\">a.b-c_d@a.b</a>.</p>\n<p>a.b-c_d@a.b-</p>\n<p>a.b-c_d@a.b_</p>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});
describe("Disallowed Raw HTML (extension)", () => {
    it("<https://github.github.com/gfm/#example-653>", () => {
        const markdown: string = "<strong> <title> <style> <em>\n\n<blockquote>\n  <xmp> is disallowed.  <XMP> is also disallowed.\n</blockquote>";
        const expected: string = "<p><strong> &lt;title> &lt;style> <em></p>\n<blockquote>\n  &lt;xmp> is disallowed.  &lt;XMP> is also disallowed.\n</blockquote>\n";
        const document: Document = parse(markdown);
        const actual: string = emit(document);
        expect(actual).toBe(expected);
        expect(document).toMatchSnapshot();
    });
});