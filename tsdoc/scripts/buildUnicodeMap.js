const MAX_UNICODE_CODEPOINT = 0x10FFFF;

class CharacterSet {
    constructor(pattern) {
        /** @type {RegExp} */
        this.pattern = pattern;
        /** @type {number[]} */
        this.map = [];
        this.active = false;
    }

    /** @param {number} codePoint */
    accept(codePoint) {
        const ch = String.fromCodePoint(codePoint);
        if (this.pattern.test(ch) !== this.active) {
            this.map.push(this.active ? codePoint - this.map[this.map.length - 1] - 1 : codePoint);
            this.active = !this.active;
        } 
    }

    toString() {
        return "[" + this.map.join(", ") + "]";
    }
}

// https://spec.commonmark.org/0.29/#whitespace-character
const whitespace = new CharacterSet(/[ \t\r\n\v\f]/u);

// https://spec.commonmark.org/0.29/#unicode-whitespace-character
const unicodeWhitespace = new CharacterSet(/[\p{Zs}\t\r\n\f]/u);

// https://spec.commonmark.org/0.29/#punctuation-character
const asciiPunctuation = new CharacterSet(/[\u{0021}-\u{002f}\u{003a}-\u{0040}\u{005b}-\u{0060}\u{007b}-\u{007e}]/u);

// https://spec.commonmark.org/0.29/#punctuation-character
const unicodePunctuation = new CharacterSet(/[\p{Pc}\p{Pd}\p{Pe}\p{Pf}\p{Pi}\p{Po}\p{Ps}]/u);

for (let i = 0; i < MAX_UNICODE_CODEPOINT; i++) {
    whitespace.accept(i);
    unicodeWhitespace.accept(i);
    asciiPunctuation.accept(i);
    unicodePunctuation.accept(i);
}

console.log(`    /*
     * Generated by scripts/buildUnicodeMap.js on node ${process.version} with unicode ${process.versions.unicode}
     * Each array below is a flattened array of start/length pairs (inclusive) (i.e., \`[32, 2]\` means 32 <= cp <= 35).
     * 
     * whitespace is based on https://spec.commonmark.org/0.29/#whitespace-character
     * unicodeWhitespace is based on https://spec.commonmark.org/0.29/#unicode-whitespace-character
     * asciiPunctuation is based on https://spec.commonmark.org/0.29/#ascii-punctuation-character
     * unicodePunctuation is based on https://spec.commonmark.org/0.29/#punctuation-character
     */
    const whitespace: number[] = ${whitespace};
    const unicodeWhitespace: number[] = ${unicodeWhitespace};
    const asciiPunctuation: number[] = ${asciiPunctuation};
    const unicodePunctuation: number[] = ${unicodePunctuation};`);